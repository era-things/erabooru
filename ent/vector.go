// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/vector"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vector is the model entity for the Vector schema.
type Vector struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier for the vector name
	ID int `json:"id,omitempty"`
	// Name of the vector entry
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VectorQuery when eager-loading is set.
	Edges        VectorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VectorEdges holds the relations/edges for other nodes in the graph.
type VectorEdges struct {
	// Media items associated with this vector
	Media []*Media `json:"media,omitempty"`
	// MediaVectors holds the value of the media_vectors edge.
	MediaVectors []*MediaVector `json:"media_vectors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e VectorEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[0] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// MediaVectorsOrErr returns the MediaVectors value or an error if the edge
// was not loaded in eager-loading.
func (e VectorEdges) MediaVectorsOrErr() ([]*MediaVector, error) {
	if e.loadedTypes[1] {
		return e.MediaVectors, nil
	}
	return nil, &NotLoadedError{edge: "media_vectors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vector.FieldID:
			values[i] = new(sql.NullInt64)
		case vector.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vector fields.
func (v *Vector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vector.
// This includes values selected through modifiers, order, etc.
func (v *Vector) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the Vector entity.
func (v *Vector) QueryMedia() *MediaQuery {
	return NewVectorClient(v.config).QueryMedia(v)
}

// QueryMediaVectors queries the "media_vectors" edge of the Vector entity.
func (v *Vector) QueryMediaVectors() *MediaVectorQuery {
	return NewVectorClient(v.config).QueryMediaVectors(v)
}

// Update returns a builder for updating this Vector.
// Note that you need to call Vector.Unwrap() before calling this method if this Vector
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vector) Update() *VectorUpdateOne {
	return NewVectorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vector) Unwrap() *Vector {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vector is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vector) String() string {
	var builder strings.Builder
	builder.WriteString("Vector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Vectors is a parsable slice of Vector.
type Vectors []*Vector
