// Code generated by ent, DO NOT EDIT.

package media

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the media type in the database.
	Label = "media"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeDates holds the string denoting the dates edge name in mutations.
	EdgeDates = "dates"
	// EdgeVectors holds the string denoting the vectors edge name in mutations.
	EdgeVectors = "vectors"
	// EdgeMediaDates holds the string denoting the media_dates edge name in mutations.
	EdgeMediaDates = "media_dates"
	// EdgeMediaVectors holds the string denoting the media_vectors edge name in mutations.
	EdgeMediaVectors = "media_vectors"
	// Table holds the table name of the media in the database.
	Table = "media"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "media_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// DatesTable is the table that holds the dates relation/edge. The primary key declared below.
	DatesTable = "media_dates"
	// DatesInverseTable is the table name for the Date entity.
	// It exists in this package in order to avoid circular dependency with the "date" package.
	DatesInverseTable = "dates"
	// VectorsTable is the table that holds the vectors relation/edge. The primary key declared below.
	VectorsTable = "media_vectors"
	// VectorsInverseTable is the table name for the Vector entity.
	// It exists in this package in order to avoid circular dependency with the "vector" package.
	VectorsInverseTable = "vectors"
	// MediaDatesTable is the table that holds the media_dates relation/edge.
	MediaDatesTable = "media_dates"
	// MediaDatesInverseTable is the table name for the MediaDate entity.
	// It exists in this package in order to avoid circular dependency with the "mediadate" package.
	MediaDatesInverseTable = "media_dates"
	// MediaDatesColumn is the table column denoting the media_dates relation/edge.
	MediaDatesColumn = "media_id"
	// MediaVectorsTable is the table that holds the media_vectors relation/edge.
	MediaVectorsTable = "media_vectors"
	// MediaVectorsInverseTable is the table name for the MediaVector entity.
	// It exists in this package in order to avoid circular dependency with the "mediavector" package.
	MediaVectorsInverseTable = "media_vectors"
	// MediaVectorsColumn is the table column denoting the media_vectors relation/edge.
	MediaVectorsColumn = "media_id"
)

// Columns holds all SQL columns for media fields.
var Columns = []string{
	FieldID,
	FieldFormat,
	FieldWidth,
	FieldHeight,
	FieldDuration,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"media_id", "tag_id"}
	// DatesPrimaryKey and DatesColumn2 are the table columns denoting the
	// primary key for the dates relation (M2M).
	DatesPrimaryKey = []string{"media_id", "date_id"}
	// VectorsPrimaryKey and VectorsColumn2 are the table columns denoting the
	// primary key for the vectors relation (M2M).
	VectorsPrimaryKey = []string{"media_id", "vector_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Media queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDatesCount orders the results by dates count.
func ByDatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDatesStep(), opts...)
	}
}

// ByDates orders the results by dates terms.
func ByDates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVectorsCount orders the results by vectors count.
func ByVectorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVectorsStep(), opts...)
	}
}

// ByVectors orders the results by vectors terms.
func ByVectors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVectorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaDatesCount orders the results by media_dates count.
func ByMediaDatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaDatesStep(), opts...)
	}
}

// ByMediaDates orders the results by media_dates terms.
func ByMediaDates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaDatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaVectorsCount orders the results by media_vectors count.
func ByMediaVectorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaVectorsStep(), opts...)
	}
}

// ByMediaVectors orders the results by media_vectors terms.
func ByMediaVectors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaVectorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newDatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DatesTable, DatesPrimaryKey...),
	)
}
func newVectorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VectorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, VectorsTable, VectorsPrimaryKey...),
	)
}
func newMediaDatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaDatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MediaDatesTable, MediaDatesColumn),
	)
}
func newMediaVectorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaVectorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MediaVectorsTable, MediaVectorsColumn),
	)
}
