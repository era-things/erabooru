// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/date"
	"era/booru/ent/media"
	"era/booru/ent/mediadate"
	"era/booru/ent/mediavector"
	"era/booru/ent/predicate"
	"era/booru/ent/tag"
	"era/booru/ent/vector"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	pgvector "github.com/pgvector/pgvector-go"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDate        = "Date"
	TypeMedia       = "Media"
	TypeMediaDate   = "MediaDate"
	TypeMediaVector = "MediaVector"
	TypeTag         = "Tag"
	TypeVector      = "Vector"
)

// DateMutation represents an operation that mutates the Date nodes in the graph.
type DateMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	media              map[string]struct{}
	removedmedia       map[string]struct{}
	clearedmedia       bool
	media_dates        map[int]struct{}
	removedmedia_dates map[int]struct{}
	clearedmedia_dates bool
	done               bool
	oldValue           func(context.Context) (*Date, error)
	predicates         []predicate.Date
}

var _ ent.Mutation = (*DateMutation)(nil)

// dateOption allows management of the mutation configuration using functional options.
type dateOption func(*DateMutation)

// newDateMutation creates new mutation for the Date entity.
func newDateMutation(c config, op Op, opts ...dateOption) *DateMutation {
	m := &DateMutation{
		config:        c,
		op:            op,
		typ:           TypeDate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDateID sets the ID field of the mutation.
func withDateID(id int) dateOption {
	return func(m *DateMutation) {
		var (
			err   error
			once  sync.Once
			value *Date
		)
		m.oldValue = func(ctx context.Context) (*Date, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Date.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDate sets the old Date of the mutation.
func withDate(node *Date) dateOption {
	return func(m *DateMutation) {
		m.oldValue = func(context.Context) (*Date, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Date entities.
func (m *DateMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Date.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Date entity.
// If the Date object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DateMutation) ResetName() {
	m.name = nil
}

// AddMediumIDs adds the "media" edge to the Media entity by ids.
func (m *DateMutation) AddMediumIDs(ids ...string) {
	if m.media == nil {
		m.media = make(map[string]struct{})
	}
	for i := range ids {
		m.media[ids[i]] = struct{}{}
	}
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *DateMutation) ClearMedia() {
	m.clearedmedia = true
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *DateMutation) MediaCleared() bool {
	return m.clearedmedia
}

// RemoveMediumIDs removes the "media" edge to the Media entity by IDs.
func (m *DateMutation) RemoveMediumIDs(ids ...string) {
	if m.removedmedia == nil {
		m.removedmedia = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.media, ids[i])
		m.removedmedia[ids[i]] = struct{}{}
	}
}

// RemovedMedia returns the removed IDs of the "media" edge to the Media entity.
func (m *DateMutation) RemovedMediaIDs() (ids []string) {
	for id := range m.removedmedia {
		ids = append(ids, id)
	}
	return
}

// MediaIDs returns the "media" edge IDs in the mutation.
func (m *DateMutation) MediaIDs() (ids []string) {
	for id := range m.media {
		ids = append(ids, id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *DateMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
	m.removedmedia = nil
}

// AddMediaDateIDs adds the "media_dates" edge to the MediaDate entity by ids.
func (m *DateMutation) AddMediaDateIDs(ids ...int) {
	if m.media_dates == nil {
		m.media_dates = make(map[int]struct{})
	}
	for i := range ids {
		m.media_dates[ids[i]] = struct{}{}
	}
}

// ClearMediaDates clears the "media_dates" edge to the MediaDate entity.
func (m *DateMutation) ClearMediaDates() {
	m.clearedmedia_dates = true
}

// MediaDatesCleared reports if the "media_dates" edge to the MediaDate entity was cleared.
func (m *DateMutation) MediaDatesCleared() bool {
	return m.clearedmedia_dates
}

// RemoveMediaDateIDs removes the "media_dates" edge to the MediaDate entity by IDs.
func (m *DateMutation) RemoveMediaDateIDs(ids ...int) {
	if m.removedmedia_dates == nil {
		m.removedmedia_dates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.media_dates, ids[i])
		m.removedmedia_dates[ids[i]] = struct{}{}
	}
}

// RemovedMediaDates returns the removed IDs of the "media_dates" edge to the MediaDate entity.
func (m *DateMutation) RemovedMediaDatesIDs() (ids []int) {
	for id := range m.removedmedia_dates {
		ids = append(ids, id)
	}
	return
}

// MediaDatesIDs returns the "media_dates" edge IDs in the mutation.
func (m *DateMutation) MediaDatesIDs() (ids []int) {
	for id := range m.media_dates {
		ids = append(ids, id)
	}
	return
}

// ResetMediaDates resets all changes to the "media_dates" edge.
func (m *DateMutation) ResetMediaDates() {
	m.media_dates = nil
	m.clearedmedia_dates = false
	m.removedmedia_dates = nil
}

// Where appends a list predicates to the DateMutation builder.
func (m *DateMutation) Where(ps ...predicate.Date) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Date, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Date).
func (m *DateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DateMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, date.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case date.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case date.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Date field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case date.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Date field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Date numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Date nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DateMutation) ResetField(name string) error {
	switch name {
	case date.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Date field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.media != nil {
		edges = append(edges, date.EdgeMedia)
	}
	if m.media_dates != nil {
		edges = append(edges, date.EdgeMediaDates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case date.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.media))
		for id := range m.media {
			ids = append(ids, id)
		}
		return ids
	case date.EdgeMediaDates:
		ids := make([]ent.Value, 0, len(m.media_dates))
		for id := range m.media_dates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmedia != nil {
		edges = append(edges, date.EdgeMedia)
	}
	if m.removedmedia_dates != nil {
		edges = append(edges, date.EdgeMediaDates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case date.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.removedmedia))
		for id := range m.removedmedia {
			ids = append(ids, id)
		}
		return ids
	case date.EdgeMediaDates:
		ids := make([]ent.Value, 0, len(m.removedmedia_dates))
		for id := range m.removedmedia_dates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmedia {
		edges = append(edges, date.EdgeMedia)
	}
	if m.clearedmedia_dates {
		edges = append(edges, date.EdgeMediaDates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DateMutation) EdgeCleared(name string) bool {
	switch name {
	case date.EdgeMedia:
		return m.clearedmedia
	case date.EdgeMediaDates:
		return m.clearedmedia_dates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Date unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DateMutation) ResetEdge(name string) error {
	switch name {
	case date.EdgeMedia:
		m.ResetMedia()
		return nil
	case date.EdgeMediaDates:
		m.ResetMediaDates()
		return nil
	}
	return fmt.Errorf("unknown Date edge %s", name)
}

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	format               *string
	width                *int16
	addwidth             *int16
	height               *int16
	addheight            *int16
	duration             *int16
	addduration          *int16
	clearedFields        map[string]struct{}
	tags                 map[int]struct{}
	removedtags          map[int]struct{}
	clearedtags          bool
	dates                map[int]struct{}
	removeddates         map[int]struct{}
	cleareddates         bool
	vectors              map[int]struct{}
	removedvectors       map[int]struct{}
	clearedvectors       bool
	media_dates          map[int]struct{}
	removedmedia_dates   map[int]struct{}
	clearedmedia_dates   bool
	media_vectors        map[int]struct{}
	removedmedia_vectors map[int]struct{}
	clearedmedia_vectors bool
	done                 bool
	oldValue             func(context.Context) (*Media, error)
	predicates           []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id string) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Media entities.
func (m *MediaMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Media.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormat sets the "format" field.
func (m *MediaMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *MediaMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *MediaMutation) ResetFormat() {
	m.format = nil
}

// SetWidth sets the "width" field.
func (m *MediaMutation) SetWidth(i int16) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *MediaMutation) Width() (r int16, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldWidth(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *MediaMutation) AddWidth(i int16) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *MediaMutation) AddedWidth() (r int16, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *MediaMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the "height" field.
func (m *MediaMutation) SetHeight(i int16) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *MediaMutation) Height() (r int16, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldHeight(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *MediaMutation) AddHeight(i int16) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *MediaMutation) AddedHeight() (r int16, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *MediaMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetDuration sets the "duration" field.
func (m *MediaMutation) SetDuration(i int16) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *MediaMutation) Duration() (r int16, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldDuration(ctx context.Context) (v *int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *MediaMutation) AddDuration(i int16) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *MediaMutation) AddedDuration() (r int16, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *MediaMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[media.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *MediaMutation) DurationCleared() bool {
	_, ok := m.clearedFields[media.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *MediaMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, media.FieldDuration)
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *MediaMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *MediaMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *MediaMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *MediaMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *MediaMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *MediaMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *MediaMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddDateIDs adds the "dates" edge to the Date entity by ids.
func (m *MediaMutation) AddDateIDs(ids ...int) {
	if m.dates == nil {
		m.dates = make(map[int]struct{})
	}
	for i := range ids {
		m.dates[ids[i]] = struct{}{}
	}
}

// ClearDates clears the "dates" edge to the Date entity.
func (m *MediaMutation) ClearDates() {
	m.cleareddates = true
}

// DatesCleared reports if the "dates" edge to the Date entity was cleared.
func (m *MediaMutation) DatesCleared() bool {
	return m.cleareddates
}

// RemoveDateIDs removes the "dates" edge to the Date entity by IDs.
func (m *MediaMutation) RemoveDateIDs(ids ...int) {
	if m.removeddates == nil {
		m.removeddates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.dates, ids[i])
		m.removeddates[ids[i]] = struct{}{}
	}
}

// RemovedDates returns the removed IDs of the "dates" edge to the Date entity.
func (m *MediaMutation) RemovedDatesIDs() (ids []int) {
	for id := range m.removeddates {
		ids = append(ids, id)
	}
	return
}

// DatesIDs returns the "dates" edge IDs in the mutation.
func (m *MediaMutation) DatesIDs() (ids []int) {
	for id := range m.dates {
		ids = append(ids, id)
	}
	return
}

// ResetDates resets all changes to the "dates" edge.
func (m *MediaMutation) ResetDates() {
	m.dates = nil
	m.cleareddates = false
	m.removeddates = nil
}

// AddVectorIDs adds the "vectors" edge to the Vector entity by ids.
func (m *MediaMutation) AddVectorIDs(ids ...int) {
	if m.vectors == nil {
		m.vectors = make(map[int]struct{})
	}
	for i := range ids {
		m.vectors[ids[i]] = struct{}{}
	}
}

// ClearVectors clears the "vectors" edge to the Vector entity.
func (m *MediaMutation) ClearVectors() {
	m.clearedvectors = true
}

// VectorsCleared reports if the "vectors" edge to the Vector entity was cleared.
func (m *MediaMutation) VectorsCleared() bool {
	return m.clearedvectors
}

// RemoveVectorIDs removes the "vectors" edge to the Vector entity by IDs.
func (m *MediaMutation) RemoveVectorIDs(ids ...int) {
	if m.removedvectors == nil {
		m.removedvectors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vectors, ids[i])
		m.removedvectors[ids[i]] = struct{}{}
	}
}

// RemovedVectors returns the removed IDs of the "vectors" edge to the Vector entity.
func (m *MediaMutation) RemovedVectorsIDs() (ids []int) {
	for id := range m.removedvectors {
		ids = append(ids, id)
	}
	return
}

// VectorsIDs returns the "vectors" edge IDs in the mutation.
func (m *MediaMutation) VectorsIDs() (ids []int) {
	for id := range m.vectors {
		ids = append(ids, id)
	}
	return
}

// ResetVectors resets all changes to the "vectors" edge.
func (m *MediaMutation) ResetVectors() {
	m.vectors = nil
	m.clearedvectors = false
	m.removedvectors = nil
}

// AddMediaDateIDs adds the "media_dates" edge to the MediaDate entity by ids.
func (m *MediaMutation) AddMediaDateIDs(ids ...int) {
	if m.media_dates == nil {
		m.media_dates = make(map[int]struct{})
	}
	for i := range ids {
		m.media_dates[ids[i]] = struct{}{}
	}
}

// ClearMediaDates clears the "media_dates" edge to the MediaDate entity.
func (m *MediaMutation) ClearMediaDates() {
	m.clearedmedia_dates = true
}

// MediaDatesCleared reports if the "media_dates" edge to the MediaDate entity was cleared.
func (m *MediaMutation) MediaDatesCleared() bool {
	return m.clearedmedia_dates
}

// RemoveMediaDateIDs removes the "media_dates" edge to the MediaDate entity by IDs.
func (m *MediaMutation) RemoveMediaDateIDs(ids ...int) {
	if m.removedmedia_dates == nil {
		m.removedmedia_dates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.media_dates, ids[i])
		m.removedmedia_dates[ids[i]] = struct{}{}
	}
}

// RemovedMediaDates returns the removed IDs of the "media_dates" edge to the MediaDate entity.
func (m *MediaMutation) RemovedMediaDatesIDs() (ids []int) {
	for id := range m.removedmedia_dates {
		ids = append(ids, id)
	}
	return
}

// MediaDatesIDs returns the "media_dates" edge IDs in the mutation.
func (m *MediaMutation) MediaDatesIDs() (ids []int) {
	for id := range m.media_dates {
		ids = append(ids, id)
	}
	return
}

// ResetMediaDates resets all changes to the "media_dates" edge.
func (m *MediaMutation) ResetMediaDates() {
	m.media_dates = nil
	m.clearedmedia_dates = false
	m.removedmedia_dates = nil
}

// AddMediaVectorIDs adds the "media_vectors" edge to the MediaVector entity by ids.
func (m *MediaMutation) AddMediaVectorIDs(ids ...int) {
	if m.media_vectors == nil {
		m.media_vectors = make(map[int]struct{})
	}
	for i := range ids {
		m.media_vectors[ids[i]] = struct{}{}
	}
}

// ClearMediaVectors clears the "media_vectors" edge to the MediaVector entity.
func (m *MediaMutation) ClearMediaVectors() {
	m.clearedmedia_vectors = true
}

// MediaVectorsCleared reports if the "media_vectors" edge to the MediaVector entity was cleared.
func (m *MediaMutation) MediaVectorsCleared() bool {
	return m.clearedmedia_vectors
}

// RemoveMediaVectorIDs removes the "media_vectors" edge to the MediaVector entity by IDs.
func (m *MediaMutation) RemoveMediaVectorIDs(ids ...int) {
	if m.removedmedia_vectors == nil {
		m.removedmedia_vectors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.media_vectors, ids[i])
		m.removedmedia_vectors[ids[i]] = struct{}{}
	}
}

// RemovedMediaVectors returns the removed IDs of the "media_vectors" edge to the MediaVector entity.
func (m *MediaMutation) RemovedMediaVectorsIDs() (ids []int) {
	for id := range m.removedmedia_vectors {
		ids = append(ids, id)
	}
	return
}

// MediaVectorsIDs returns the "media_vectors" edge IDs in the mutation.
func (m *MediaMutation) MediaVectorsIDs() (ids []int) {
	for id := range m.media_vectors {
		ids = append(ids, id)
	}
	return
}

// ResetMediaVectors resets all changes to the "media_vectors" edge.
func (m *MediaMutation) ResetMediaVectors() {
	m.media_vectors = nil
	m.clearedmedia_vectors = false
	m.removedmedia_vectors = nil
}

// Where appends a list predicates to the MediaMutation builder.
func (m *MediaMutation) Where(ps ...predicate.Media) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Media, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.format != nil {
		fields = append(fields, media.FieldFormat)
	}
	if m.width != nil {
		fields = append(fields, media.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, media.FieldHeight)
	}
	if m.duration != nil {
		fields = append(fields, media.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldFormat:
		return m.Format()
	case media.FieldWidth:
		return m.Width()
	case media.FieldHeight:
		return m.Height()
	case media.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldFormat:
		return m.OldFormat(ctx)
	case media.FieldWidth:
		return m.OldWidth(ctx)
	case media.FieldHeight:
		return m.OldHeight(ctx)
	case media.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case media.FieldWidth:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case media.FieldHeight:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case media.FieldDuration:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	var fields []string
	if m.addwidth != nil {
		fields = append(fields, media.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, media.FieldHeight)
	}
	if m.addduration != nil {
		fields = append(fields, media.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case media.FieldWidth:
		return m.AddedWidth()
	case media.FieldHeight:
		return m.AddedHeight()
	case media.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case media.FieldWidth:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case media.FieldHeight:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case media.FieldDuration:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(media.FieldDuration) {
		fields = append(fields, media.FieldDuration)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	switch name {
	case media.FieldDuration:
		m.ClearDuration()
		return nil
	}
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldFormat:
		m.ResetFormat()
		return nil
	case media.FieldWidth:
		m.ResetWidth()
		return nil
	case media.FieldHeight:
		m.ResetHeight()
		return nil
	case media.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.tags != nil {
		edges = append(edges, media.EdgeTags)
	}
	if m.dates != nil {
		edges = append(edges, media.EdgeDates)
	}
	if m.vectors != nil {
		edges = append(edges, media.EdgeVectors)
	}
	if m.media_dates != nil {
		edges = append(edges, media.EdgeMediaDates)
	}
	if m.media_vectors != nil {
		edges = append(edges, media.EdgeMediaVectors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeDates:
		ids := make([]ent.Value, 0, len(m.dates))
		for id := range m.dates {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeVectors:
		ids := make([]ent.Value, 0, len(m.vectors))
		for id := range m.vectors {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeMediaDates:
		ids := make([]ent.Value, 0, len(m.media_dates))
		for id := range m.media_dates {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeMediaVectors:
		ids := make([]ent.Value, 0, len(m.media_vectors))
		for id := range m.media_vectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedtags != nil {
		edges = append(edges, media.EdgeTags)
	}
	if m.removeddates != nil {
		edges = append(edges, media.EdgeDates)
	}
	if m.removedvectors != nil {
		edges = append(edges, media.EdgeVectors)
	}
	if m.removedmedia_dates != nil {
		edges = append(edges, media.EdgeMediaDates)
	}
	if m.removedmedia_vectors != nil {
		edges = append(edges, media.EdgeMediaVectors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeDates:
		ids := make([]ent.Value, 0, len(m.removeddates))
		for id := range m.removeddates {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeVectors:
		ids := make([]ent.Value, 0, len(m.removedvectors))
		for id := range m.removedvectors {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeMediaDates:
		ids := make([]ent.Value, 0, len(m.removedmedia_dates))
		for id := range m.removedmedia_dates {
			ids = append(ids, id)
		}
		return ids
	case media.EdgeMediaVectors:
		ids := make([]ent.Value, 0, len(m.removedmedia_vectors))
		for id := range m.removedmedia_vectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedtags {
		edges = append(edges, media.EdgeTags)
	}
	if m.cleareddates {
		edges = append(edges, media.EdgeDates)
	}
	if m.clearedvectors {
		edges = append(edges, media.EdgeVectors)
	}
	if m.clearedmedia_dates {
		edges = append(edges, media.EdgeMediaDates)
	}
	if m.clearedmedia_vectors {
		edges = append(edges, media.EdgeMediaVectors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	switch name {
	case media.EdgeTags:
		return m.clearedtags
	case media.EdgeDates:
		return m.cleareddates
	case media.EdgeVectors:
		return m.clearedvectors
	case media.EdgeMediaDates:
		return m.clearedmedia_dates
	case media.EdgeMediaVectors:
		return m.clearedmedia_vectors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	switch name {
	case media.EdgeTags:
		m.ResetTags()
		return nil
	case media.EdgeDates:
		m.ResetDates()
		return nil
	case media.EdgeVectors:
		m.ResetVectors()
		return nil
	case media.EdgeMediaDates:
		m.ResetMediaDates()
		return nil
	case media.EdgeMediaVectors:
		m.ResetMediaVectors()
		return nil
	}
	return fmt.Errorf("unknown Media edge %s", name)
}

// MediaDateMutation represents an operation that mutates the MediaDate nodes in the graph.
type MediaDateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	value         *time.Time
	clearedFields map[string]struct{}
	media         *string
	clearedmedia  bool
	date          *int
	cleareddate   bool
	done          bool
	oldValue      func(context.Context) (*MediaDate, error)
	predicates    []predicate.MediaDate
}

var _ ent.Mutation = (*MediaDateMutation)(nil)

// mediadateOption allows management of the mutation configuration using functional options.
type mediadateOption func(*MediaDateMutation)

// newMediaDateMutation creates new mutation for the MediaDate entity.
func newMediaDateMutation(c config, op Op, opts ...mediadateOption) *MediaDateMutation {
	m := &MediaDateMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaDate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaDateID sets the ID field of the mutation.
func withMediaDateID(id int) mediadateOption {
	return func(m *MediaDateMutation) {
		var (
			err   error
			once  sync.Once
			value *MediaDate
		)
		m.oldValue = func(ctx context.Context) (*MediaDate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MediaDate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMediaDate sets the old MediaDate of the mutation.
func withMediaDate(node *MediaDate) mediadateOption {
	return func(m *MediaDateMutation) {
		m.oldValue = func(context.Context) (*MediaDate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaDateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaDateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaDateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaDateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MediaDate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMediaID sets the "media_id" field.
func (m *MediaDateMutation) SetMediaID(s string) {
	m.media = &s
}

// MediaID returns the value of the "media_id" field in the mutation.
func (m *MediaDateMutation) MediaID() (r string, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaID returns the old "media_id" field's value of the MediaDate entity.
// If the MediaDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaDateMutation) OldMediaID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaID: %w", err)
	}
	return oldValue.MediaID, nil
}

// ResetMediaID resets all changes to the "media_id" field.
func (m *MediaDateMutation) ResetMediaID() {
	m.media = nil
}

// SetDateID sets the "date_id" field.
func (m *MediaDateMutation) SetDateID(i int) {
	m.date = &i
}

// DateID returns the value of the "date_id" field in the mutation.
func (m *MediaDateMutation) DateID() (r int, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDateID returns the old "date_id" field's value of the MediaDate entity.
// If the MediaDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaDateMutation) OldDateID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateID: %w", err)
	}
	return oldValue.DateID, nil
}

// ResetDateID resets all changes to the "date_id" field.
func (m *MediaDateMutation) ResetDateID() {
	m.date = nil
}

// SetValue sets the "value" field.
func (m *MediaDateMutation) SetValue(t time.Time) {
	m.value = &t
}

// Value returns the value of the "value" field in the mutation.
func (m *MediaDateMutation) Value() (r time.Time, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the MediaDate entity.
// If the MediaDate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaDateMutation) OldValue(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *MediaDateMutation) ResetValue() {
	m.value = nil
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *MediaDateMutation) ClearMedia() {
	m.clearedmedia = true
	m.clearedFields[mediadate.FieldMediaID] = struct{}{}
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *MediaDateMutation) MediaCleared() bool {
	return m.clearedmedia
}

// MediaIDs returns the "media" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MediaID instead. It exists only for internal usage by the builders.
func (m *MediaDateMutation) MediaIDs() (ids []string) {
	if id := m.media; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *MediaDateMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
}

// ClearDate clears the "date" edge to the Date entity.
func (m *MediaDateMutation) ClearDate() {
	m.cleareddate = true
	m.clearedFields[mediadate.FieldDateID] = struct{}{}
}

// DateCleared reports if the "date" edge to the Date entity was cleared.
func (m *MediaDateMutation) DateCleared() bool {
	return m.cleareddate
}

// DateIDs returns the "date" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DateID instead. It exists only for internal usage by the builders.
func (m *MediaDateMutation) DateIDs() (ids []int) {
	if id := m.date; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDate resets all changes to the "date" edge.
func (m *MediaDateMutation) ResetDate() {
	m.date = nil
	m.cleareddate = false
}

// Where appends a list predicates to the MediaDateMutation builder.
func (m *MediaDateMutation) Where(ps ...predicate.MediaDate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaDateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaDateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MediaDate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaDateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaDateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MediaDate).
func (m *MediaDateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaDateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.media != nil {
		fields = append(fields, mediadate.FieldMediaID)
	}
	if m.date != nil {
		fields = append(fields, mediadate.FieldDateID)
	}
	if m.value != nil {
		fields = append(fields, mediadate.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaDateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediadate.FieldMediaID:
		return m.MediaID()
	case mediadate.FieldDateID:
		return m.DateID()
	case mediadate.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaDateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mediadate.FieldMediaID:
		return m.OldMediaID(ctx)
	case mediadate.FieldDateID:
		return m.OldDateID(ctx)
	case mediadate.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown MediaDate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaDateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediadate.FieldMediaID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaID(v)
		return nil
	case mediadate.FieldDateID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateID(v)
		return nil
	case mediadate.FieldValue:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown MediaDate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaDateMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaDateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaDateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MediaDate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaDateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaDateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaDateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MediaDate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaDateMutation) ResetField(name string) error {
	switch name {
	case mediadate.FieldMediaID:
		m.ResetMediaID()
		return nil
	case mediadate.FieldDateID:
		m.ResetDateID()
		return nil
	case mediadate.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown MediaDate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaDateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.media != nil {
		edges = append(edges, mediadate.EdgeMedia)
	}
	if m.date != nil {
		edges = append(edges, mediadate.EdgeDate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaDateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mediadate.EdgeMedia:
		if id := m.media; id != nil {
			return []ent.Value{*id}
		}
	case mediadate.EdgeDate:
		if id := m.date; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaDateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaDateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaDateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmedia {
		edges = append(edges, mediadate.EdgeMedia)
	}
	if m.cleareddate {
		edges = append(edges, mediadate.EdgeDate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaDateMutation) EdgeCleared(name string) bool {
	switch name {
	case mediadate.EdgeMedia:
		return m.clearedmedia
	case mediadate.EdgeDate:
		return m.cleareddate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaDateMutation) ClearEdge(name string) error {
	switch name {
	case mediadate.EdgeMedia:
		m.ClearMedia()
		return nil
	case mediadate.EdgeDate:
		m.ClearDate()
		return nil
	}
	return fmt.Errorf("unknown MediaDate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaDateMutation) ResetEdge(name string) error {
	switch name {
	case mediadate.EdgeMedia:
		m.ResetMedia()
		return nil
	case mediadate.EdgeDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown MediaDate edge %s", name)
}

// MediaVectorMutation represents an operation that mutates the MediaVector nodes in the graph.
type MediaVectorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	value         *pgvector.Vector
	clearedFields map[string]struct{}
	media         *string
	clearedmedia  bool
	vector        *int
	clearedvector bool
	done          bool
	oldValue      func(context.Context) (*MediaVector, error)
	predicates    []predicate.MediaVector
}

var _ ent.Mutation = (*MediaVectorMutation)(nil)

// mediavectorOption allows management of the mutation configuration using functional options.
type mediavectorOption func(*MediaVectorMutation)

// newMediaVectorMutation creates new mutation for the MediaVector entity.
func newMediaVectorMutation(c config, op Op, opts ...mediavectorOption) *MediaVectorMutation {
	m := &MediaVectorMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaVector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaVectorID sets the ID field of the mutation.
func withMediaVectorID(id int) mediavectorOption {
	return func(m *MediaVectorMutation) {
		var (
			err   error
			once  sync.Once
			value *MediaVector
		)
		m.oldValue = func(ctx context.Context) (*MediaVector, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MediaVector.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMediaVector sets the old MediaVector of the mutation.
func withMediaVector(node *MediaVector) mediavectorOption {
	return func(m *MediaVectorMutation) {
		m.oldValue = func(context.Context) (*MediaVector, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaVectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaVectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaVectorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaVectorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MediaVector.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMediaID sets the "media_id" field.
func (m *MediaVectorMutation) SetMediaID(s string) {
	m.media = &s
}

// MediaID returns the value of the "media_id" field in the mutation.
func (m *MediaVectorMutation) MediaID() (r string, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaID returns the old "media_id" field's value of the MediaVector entity.
// If the MediaVector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaVectorMutation) OldMediaID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaID: %w", err)
	}
	return oldValue.MediaID, nil
}

// ResetMediaID resets all changes to the "media_id" field.
func (m *MediaVectorMutation) ResetMediaID() {
	m.media = nil
}

// SetVectorID sets the "vector_id" field.
func (m *MediaVectorMutation) SetVectorID(i int) {
	m.vector = &i
}

// VectorID returns the value of the "vector_id" field in the mutation.
func (m *MediaVectorMutation) VectorID() (r int, exists bool) {
	v := m.vector
	if v == nil {
		return
	}
	return *v, true
}

// OldVectorID returns the old "vector_id" field's value of the MediaVector entity.
// If the MediaVector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaVectorMutation) OldVectorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVectorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVectorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVectorID: %w", err)
	}
	return oldValue.VectorID, nil
}

// ResetVectorID resets all changes to the "vector_id" field.
func (m *MediaVectorMutation) ResetVectorID() {
	m.vector = nil
}

// SetValue sets the "value" field.
func (m *MediaVectorMutation) SetValue(pg pgvector.Vector) {
	m.value = &pg
}

// Value returns the value of the "value" field in the mutation.
func (m *MediaVectorMutation) Value() (r pgvector.Vector, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the MediaVector entity.
// If the MediaVector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaVectorMutation) OldValue(ctx context.Context) (v pgvector.Vector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *MediaVectorMutation) ResetValue() {
	m.value = nil
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *MediaVectorMutation) ClearMedia() {
	m.clearedmedia = true
	m.clearedFields[mediavector.FieldMediaID] = struct{}{}
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *MediaVectorMutation) MediaCleared() bool {
	return m.clearedmedia
}

// MediaIDs returns the "media" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MediaID instead. It exists only for internal usage by the builders.
func (m *MediaVectorMutation) MediaIDs() (ids []string) {
	if id := m.media; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *MediaVectorMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
}

// ClearVector clears the "vector" edge to the Vector entity.
func (m *MediaVectorMutation) ClearVector() {
	m.clearedvector = true
	m.clearedFields[mediavector.FieldVectorID] = struct{}{}
}

// VectorCleared reports if the "vector" edge to the Vector entity was cleared.
func (m *MediaVectorMutation) VectorCleared() bool {
	return m.clearedvector
}

// VectorIDs returns the "vector" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VectorID instead. It exists only for internal usage by the builders.
func (m *MediaVectorMutation) VectorIDs() (ids []int) {
	if id := m.vector; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVector resets all changes to the "vector" edge.
func (m *MediaVectorMutation) ResetVector() {
	m.vector = nil
	m.clearedvector = false
}

// Where appends a list predicates to the MediaVectorMutation builder.
func (m *MediaVectorMutation) Where(ps ...predicate.MediaVector) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MediaVectorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MediaVectorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MediaVector, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MediaVectorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MediaVectorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MediaVector).
func (m *MediaVectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaVectorMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.media != nil {
		fields = append(fields, mediavector.FieldMediaID)
	}
	if m.vector != nil {
		fields = append(fields, mediavector.FieldVectorID)
	}
	if m.value != nil {
		fields = append(fields, mediavector.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaVectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediavector.FieldMediaID:
		return m.MediaID()
	case mediavector.FieldVectorID:
		return m.VectorID()
	case mediavector.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaVectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mediavector.FieldMediaID:
		return m.OldMediaID(ctx)
	case mediavector.FieldVectorID:
		return m.OldVectorID(ctx)
	case mediavector.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown MediaVector field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaVectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediavector.FieldMediaID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaID(v)
		return nil
	case mediavector.FieldVectorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVectorID(v)
		return nil
	case mediavector.FieldValue:
		v, ok := value.(pgvector.Vector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown MediaVector field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaVectorMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaVectorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaVectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MediaVector numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaVectorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaVectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaVectorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MediaVector nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaVectorMutation) ResetField(name string) error {
	switch name {
	case mediavector.FieldMediaID:
		m.ResetMediaID()
		return nil
	case mediavector.FieldVectorID:
		m.ResetVectorID()
		return nil
	case mediavector.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown MediaVector field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaVectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.media != nil {
		edges = append(edges, mediavector.EdgeMedia)
	}
	if m.vector != nil {
		edges = append(edges, mediavector.EdgeVector)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaVectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mediavector.EdgeMedia:
		if id := m.media; id != nil {
			return []ent.Value{*id}
		}
	case mediavector.EdgeVector:
		if id := m.vector; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaVectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaVectorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaVectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmedia {
		edges = append(edges, mediavector.EdgeMedia)
	}
	if m.clearedvector {
		edges = append(edges, mediavector.EdgeVector)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaVectorMutation) EdgeCleared(name string) bool {
	switch name {
	case mediavector.EdgeMedia:
		return m.clearedmedia
	case mediavector.EdgeVector:
		return m.clearedvector
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaVectorMutation) ClearEdge(name string) error {
	switch name {
	case mediavector.EdgeMedia:
		m.ClearMedia()
		return nil
	case mediavector.EdgeVector:
		m.ClearVector()
		return nil
	}
	return fmt.Errorf("unknown MediaVector unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaVectorMutation) ResetEdge(name string) error {
	switch name {
	case mediavector.EdgeMedia:
		m.ResetMedia()
		return nil
	case mediavector.EdgeVector:
		m.ResetVector()
		return nil
	}
	return fmt.Errorf("unknown MediaVector edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	_type         *tag.Type
	clearedFields map[string]struct{}
	media         map[string]struct{}
	removedmedia  map[string]struct{}
	clearedmedia  bool
	done          bool
	oldValue      func(context.Context) (*Tag, error)
	predicates    []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tag entities.
func (m *TagMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *TagMutation) SetType(t tag.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TagMutation) GetType() (r tag.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldType(ctx context.Context) (v tag.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TagMutation) ResetType() {
	m._type = nil
}

// AddMediumIDs adds the "media" edge to the Media entity by ids.
func (m *TagMutation) AddMediumIDs(ids ...string) {
	if m.media == nil {
		m.media = make(map[string]struct{})
	}
	for i := range ids {
		m.media[ids[i]] = struct{}{}
	}
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *TagMutation) ClearMedia() {
	m.clearedmedia = true
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *TagMutation) MediaCleared() bool {
	return m.clearedmedia
}

// RemoveMediumIDs removes the "media" edge to the Media entity by IDs.
func (m *TagMutation) RemoveMediumIDs(ids ...string) {
	if m.removedmedia == nil {
		m.removedmedia = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.media, ids[i])
		m.removedmedia[ids[i]] = struct{}{}
	}
}

// RemovedMedia returns the removed IDs of the "media" edge to the Media entity.
func (m *TagMutation) RemovedMediaIDs() (ids []string) {
	for id := range m.removedmedia {
		ids = append(ids, id)
	}
	return
}

// MediaIDs returns the "media" edge IDs in the mutation.
func (m *TagMutation) MediaIDs() (ids []string) {
	for id := range m.media {
		ids = append(ids, id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *TagMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
	m.removedmedia = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	if m._type != nil {
		fields = append(fields, tag.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldName:
		return m.Name()
	case tag.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldName:
		return m.OldName(ctx)
	case tag.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tag.FieldType:
		v, ok := value.(tag.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldName:
		m.ResetName()
		return nil
	case tag.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.media != nil {
		edges = append(edges, tag.EdgeMedia)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.media))
		for id := range m.media {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedia != nil {
		edges = append(edges, tag.EdgeMedia)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.removedmedia))
		for id := range m.removedmedia {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmedia {
		edges = append(edges, tag.EdgeMedia)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeMedia:
		return m.clearedmedia
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeMedia:
		m.ResetMedia()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// VectorMutation represents an operation that mutates the Vector nodes in the graph.
type VectorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	name                 *string
	clearedFields        map[string]struct{}
	media                map[string]struct{}
	removedmedia         map[string]struct{}
	clearedmedia         bool
	media_vectors        map[int]struct{}
	removedmedia_vectors map[int]struct{}
	clearedmedia_vectors bool
	done                 bool
	oldValue             func(context.Context) (*Vector, error)
	predicates           []predicate.Vector
}

var _ ent.Mutation = (*VectorMutation)(nil)

// vectorOption allows management of the mutation configuration using functional options.
type vectorOption func(*VectorMutation)

// newVectorMutation creates new mutation for the Vector entity.
func newVectorMutation(c config, op Op, opts ...vectorOption) *VectorMutation {
	m := &VectorMutation{
		config:        c,
		op:            op,
		typ:           TypeVector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVectorID sets the ID field of the mutation.
func withVectorID(id int) vectorOption {
	return func(m *VectorMutation) {
		var (
			err   error
			once  sync.Once
			value *Vector
		)
		m.oldValue = func(ctx context.Context) (*Vector, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vector.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVector sets the old Vector of the mutation.
func withVector(node *Vector) vectorOption {
	return func(m *VectorMutation) {
		m.oldValue = func(context.Context) (*Vector, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Vector entities.
func (m *VectorMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VectorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VectorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vector.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VectorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VectorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Vector entity.
// If the Vector object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VectorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VectorMutation) ResetName() {
	m.name = nil
}

// AddMediumIDs adds the "media" edge to the Media entity by ids.
func (m *VectorMutation) AddMediumIDs(ids ...string) {
	if m.media == nil {
		m.media = make(map[string]struct{})
	}
	for i := range ids {
		m.media[ids[i]] = struct{}{}
	}
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *VectorMutation) ClearMedia() {
	m.clearedmedia = true
}

// MediaCleared reports if the "media" edge to the Media entity was cleared.
func (m *VectorMutation) MediaCleared() bool {
	return m.clearedmedia
}

// RemoveMediumIDs removes the "media" edge to the Media entity by IDs.
func (m *VectorMutation) RemoveMediumIDs(ids ...string) {
	if m.removedmedia == nil {
		m.removedmedia = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.media, ids[i])
		m.removedmedia[ids[i]] = struct{}{}
	}
}

// RemovedMedia returns the removed IDs of the "media" edge to the Media entity.
func (m *VectorMutation) RemovedMediaIDs() (ids []string) {
	for id := range m.removedmedia {
		ids = append(ids, id)
	}
	return
}

// MediaIDs returns the "media" edge IDs in the mutation.
func (m *VectorMutation) MediaIDs() (ids []string) {
	for id := range m.media {
		ids = append(ids, id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *VectorMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
	m.removedmedia = nil
}

// AddMediaVectorIDs adds the "media_vectors" edge to the MediaVector entity by ids.
func (m *VectorMutation) AddMediaVectorIDs(ids ...int) {
	if m.media_vectors == nil {
		m.media_vectors = make(map[int]struct{})
	}
	for i := range ids {
		m.media_vectors[ids[i]] = struct{}{}
	}
}

// ClearMediaVectors clears the "media_vectors" edge to the MediaVector entity.
func (m *VectorMutation) ClearMediaVectors() {
	m.clearedmedia_vectors = true
}

// MediaVectorsCleared reports if the "media_vectors" edge to the MediaVector entity was cleared.
func (m *VectorMutation) MediaVectorsCleared() bool {
	return m.clearedmedia_vectors
}

// RemoveMediaVectorIDs removes the "media_vectors" edge to the MediaVector entity by IDs.
func (m *VectorMutation) RemoveMediaVectorIDs(ids ...int) {
	if m.removedmedia_vectors == nil {
		m.removedmedia_vectors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.media_vectors, ids[i])
		m.removedmedia_vectors[ids[i]] = struct{}{}
	}
}

// RemovedMediaVectors returns the removed IDs of the "media_vectors" edge to the MediaVector entity.
func (m *VectorMutation) RemovedMediaVectorsIDs() (ids []int) {
	for id := range m.removedmedia_vectors {
		ids = append(ids, id)
	}
	return
}

// MediaVectorsIDs returns the "media_vectors" edge IDs in the mutation.
func (m *VectorMutation) MediaVectorsIDs() (ids []int) {
	for id := range m.media_vectors {
		ids = append(ids, id)
	}
	return
}

// ResetMediaVectors resets all changes to the "media_vectors" edge.
func (m *VectorMutation) ResetMediaVectors() {
	m.media_vectors = nil
	m.clearedmedia_vectors = false
	m.removedmedia_vectors = nil
}

// Where appends a list predicates to the VectorMutation builder.
func (m *VectorMutation) Where(ps ...predicate.Vector) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VectorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VectorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vector, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VectorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VectorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vector).
func (m *VectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VectorMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, vector.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vector.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vector.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Vector field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vector.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Vector field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VectorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VectorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vector numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VectorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VectorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vector nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VectorMutation) ResetField(name string) error {
	switch name {
	case vector.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Vector field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.media != nil {
		edges = append(edges, vector.EdgeMedia)
	}
	if m.media_vectors != nil {
		edges = append(edges, vector.EdgeMediaVectors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vector.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.media))
		for id := range m.media {
			ids = append(ids, id)
		}
		return ids
	case vector.EdgeMediaVectors:
		ids := make([]ent.Value, 0, len(m.media_vectors))
		for id := range m.media_vectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmedia != nil {
		edges = append(edges, vector.EdgeMedia)
	}
	if m.removedmedia_vectors != nil {
		edges = append(edges, vector.EdgeMediaVectors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VectorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vector.EdgeMedia:
		ids := make([]ent.Value, 0, len(m.removedmedia))
		for id := range m.removedmedia {
			ids = append(ids, id)
		}
		return ids
	case vector.EdgeMediaVectors:
		ids := make([]ent.Value, 0, len(m.removedmedia_vectors))
		for id := range m.removedmedia_vectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmedia {
		edges = append(edges, vector.EdgeMedia)
	}
	if m.clearedmedia_vectors {
		edges = append(edges, vector.EdgeMediaVectors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VectorMutation) EdgeCleared(name string) bool {
	switch name {
	case vector.EdgeMedia:
		return m.clearedmedia
	case vector.EdgeMediaVectors:
		return m.clearedmedia_vectors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VectorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Vector unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VectorMutation) ResetEdge(name string) error {
	switch name {
	case vector.EdgeMedia:
		m.ResetMedia()
		return nil
	case vector.EdgeMediaVectors:
		m.ResetMediaVectors()
		return nil
	}
	return fmt.Errorf("unknown Vector edge %s", name)
}
