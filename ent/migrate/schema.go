// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DatesColumns holds the columns for the "dates" table.
	DatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// DatesTable holds the schema information for the "dates" table.
	DatesTable = &schema.Table{
		Name:       "dates",
		Columns:    DatesColumns,
		PrimaryKey: []*schema.Column{DatesColumns[0]},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "format", Type: field.TypeString},
		{Name: "width", Type: field.TypeInt16},
		{Name: "height", Type: field.TypeInt16},
		{Name: "duration", Type: field.TypeInt16, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
	}
	// MediaDatesColumns holds the columns for the "media_dates" table.
	MediaDatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "media_id", Type: field.TypeString},
		{Name: "date_id", Type: field.TypeInt},
	}
	// MediaDatesTable holds the schema information for the "media_dates" table.
	MediaDatesTable = &schema.Table{
		Name:       "media_dates",
		Columns:    MediaDatesColumns,
		PrimaryKey: []*schema.Column{MediaDatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_dates_media_media",
				Columns:    []*schema.Column{MediaDatesColumns[2]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "media_dates_dates_date",
				Columns:    []*schema.Column{MediaDatesColumns[3]},
				RefColumns: []*schema.Column{DatesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mediadate_media_id_date_id",
				Unique:  true,
				Columns: []*schema.Column{MediaDatesColumns[2], MediaDatesColumns[3]},
			},
		},
	}
	// MediaVectorsColumns holds the columns for the "media_vectors" table.
	MediaVectorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "vector"}},
		{Name: "media_id", Type: field.TypeString},
		{Name: "vector_id", Type: field.TypeInt},
	}
	// MediaVectorsTable holds the schema information for the "media_vectors" table.
	MediaVectorsTable = &schema.Table{
		Name:       "media_vectors",
		Columns:    MediaVectorsColumns,
		PrimaryKey: []*schema.Column{MediaVectorsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_vectors_media_media",
				Columns:    []*schema.Column{MediaVectorsColumns[2]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "media_vectors_vectors_vector",
				Columns:    []*schema.Column{MediaVectorsColumns[3]},
				RefColumns: []*schema.Column{VectorsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "mediavector_media_id_vector_id",
				Unique:  true,
				Columns: []*schema.Column{MediaVectorsColumns[2], MediaVectorsColumns[3]},
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"user_tag", "meta_tag"}},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// VectorsColumns holds the columns for the "vectors" table.
	VectorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// VectorsTable holds the schema information for the "vectors" table.
	VectorsTable = &schema.Table{
		Name:       "vectors",
		Columns:    VectorsColumns,
		PrimaryKey: []*schema.Column{VectorsColumns[0]},
	}
	// MediaTagsColumns holds the columns for the "media_tags" table.
	MediaTagsColumns = []*schema.Column{
		{Name: "media_id", Type: field.TypeString},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// MediaTagsTable holds the schema information for the "media_tags" table.
	MediaTagsTable = &schema.Table{
		Name:       "media_tags",
		Columns:    MediaTagsColumns,
		PrimaryKey: []*schema.Column{MediaTagsColumns[0], MediaTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_tags_media_id",
				Columns:    []*schema.Column{MediaTagsColumns[0]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "media_tags_tag_id",
				Columns:    []*schema.Column{MediaTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DatesTable,
		MediaTable,
		MediaDatesTable,
		MediaVectorsTable,
		TagsTable,
		VectorsTable,
		MediaTagsTable,
	}
)

func init() {
	MediaDatesTable.ForeignKeys[0].RefTable = MediaTable
	MediaDatesTable.ForeignKeys[1].RefTable = DatesTable
	MediaVectorsTable.ForeignKeys[0].RefTable = MediaTable
	MediaVectorsTable.ForeignKeys[1].RefTable = VectorsTable
	MediaTagsTable.ForeignKeys[0].RefTable = MediaTable
	MediaTagsTable.ForeignKeys[1].RefTable = TagsTable
}
