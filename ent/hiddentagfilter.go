// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/hiddentagfilter"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HiddenTagFilter is the model entity for the HiddenTagFilter schema.
type HiddenTagFilter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HiddenTagFilter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hiddentagfilter.FieldID:
			values[i] = new(sql.NullInt64)
		case hiddentagfilter.FieldValue:
			values[i] = new(sql.NullString)
		case hiddentagfilter.FieldCreatedAt, hiddentagfilter.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HiddenTagFilter fields.
func (htf *HiddenTagFilter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hiddentagfilter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			htf.ID = int(value.Int64)
		case hiddentagfilter.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				htf.Value = value.String
			}
		case hiddentagfilter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				htf.CreatedAt = value.Time
			}
		case hiddentagfilter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				htf.UpdatedAt = value.Time
			}
		default:
			htf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the HiddenTagFilter.
// This includes values selected through modifiers, order, etc.
func (htf *HiddenTagFilter) GetValue(name string) (ent.Value, error) {
	return htf.selectValues.Get(name)
}

// Update returns a builder for updating this HiddenTagFilter.
// Note that you need to call HiddenTagFilter.Unwrap() before calling this method if this HiddenTagFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (htf *HiddenTagFilter) Update() *HiddenTagFilterUpdateOne {
	return NewHiddenTagFilterClient(htf.config).UpdateOne(htf)
}

// Unwrap unwraps the HiddenTagFilter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (htf *HiddenTagFilter) Unwrap() *HiddenTagFilter {
	_tx, ok := htf.config.driver.(*txDriver)
	if !ok {
		panic("ent: HiddenTagFilter is not a transactional entity")
	}
	htf.config.driver = _tx.drv
	return htf
}

// String implements the fmt.Stringer.
func (htf *HiddenTagFilter) String() string {
	var builder strings.Builder
	builder.WriteString("HiddenTagFilter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", htf.ID))
	builder.WriteString("value=")
	builder.WriteString(htf.Value)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(htf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(htf.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HiddenTagFilters is a parsable slice of HiddenTagFilter.
type HiddenTagFilters []*HiddenTagFilter
