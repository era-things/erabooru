// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/hiddentagfilter"
	"era/booru/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HiddenTagFilterUpdate is the builder for updating HiddenTagFilter entities.
type HiddenTagFilterUpdate struct {
	config
	hooks    []Hook
	mutation *HiddenTagFilterMutation
}

// Where appends a list predicates to the HiddenTagFilterUpdate builder.
func (htfu *HiddenTagFilterUpdate) Where(ps ...predicate.HiddenTagFilter) *HiddenTagFilterUpdate {
	htfu.mutation.Where(ps...)
	return htfu
}

// SetValue sets the "value" field.
func (htfu *HiddenTagFilterUpdate) SetValue(s string) *HiddenTagFilterUpdate {
	htfu.mutation.SetValue(s)
	return htfu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (htfu *HiddenTagFilterUpdate) SetNillableValue(s *string) *HiddenTagFilterUpdate {
	if s != nil {
		htfu.SetValue(*s)
	}
	return htfu
}

// SetUpdatedAt sets the "updated_at" field.
func (htfu *HiddenTagFilterUpdate) SetUpdatedAt(t time.Time) *HiddenTagFilterUpdate {
	htfu.mutation.SetUpdatedAt(t)
	return htfu
}

// Mutation returns the HiddenTagFilterMutation object of the builder.
func (htfu *HiddenTagFilterUpdate) Mutation() *HiddenTagFilterMutation {
	return htfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htfu *HiddenTagFilterUpdate) Save(ctx context.Context) (int, error) {
	htfu.defaults()
	return withHooks(ctx, htfu.sqlSave, htfu.mutation, htfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htfu *HiddenTagFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := htfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htfu *HiddenTagFilterUpdate) Exec(ctx context.Context) error {
	_, err := htfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htfu *HiddenTagFilterUpdate) ExecX(ctx context.Context) {
	if err := htfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htfu *HiddenTagFilterUpdate) defaults() {
	if _, ok := htfu.mutation.UpdatedAt(); !ok {
		v := hiddentagfilter.UpdateDefaultUpdatedAt()
		htfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htfu *HiddenTagFilterUpdate) check() error {
	if v, ok := htfu.mutation.Value(); ok {
		if err := hiddentagfilter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "HiddenTagFilter.value": %w`, err)}
		}
	}
	return nil
}

func (htfu *HiddenTagFilterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hiddentagfilter.Table, hiddentagfilter.Columns, sqlgraph.NewFieldSpec(hiddentagfilter.FieldID, field.TypeInt))
	if ps := htfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htfu.mutation.Value(); ok {
		_spec.SetField(hiddentagfilter.FieldValue, field.TypeString, value)
	}
	if value, ok := htfu.mutation.UpdatedAt(); ok {
		_spec.SetField(hiddentagfilter.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiddentagfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htfu.mutation.done = true
	return n, nil
}

// HiddenTagFilterUpdateOne is the builder for updating a single HiddenTagFilter entity.
type HiddenTagFilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HiddenTagFilterMutation
}

// SetValue sets the "value" field.
func (htfuo *HiddenTagFilterUpdateOne) SetValue(s string) *HiddenTagFilterUpdateOne {
	htfuo.mutation.SetValue(s)
	return htfuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (htfuo *HiddenTagFilterUpdateOne) SetNillableValue(s *string) *HiddenTagFilterUpdateOne {
	if s != nil {
		htfuo.SetValue(*s)
	}
	return htfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (htfuo *HiddenTagFilterUpdateOne) SetUpdatedAt(t time.Time) *HiddenTagFilterUpdateOne {
	htfuo.mutation.SetUpdatedAt(t)
	return htfuo
}

// Mutation returns the HiddenTagFilterMutation object of the builder.
func (htfuo *HiddenTagFilterUpdateOne) Mutation() *HiddenTagFilterMutation {
	return htfuo.mutation
}

// Where appends a list predicates to the HiddenTagFilterUpdate builder.
func (htfuo *HiddenTagFilterUpdateOne) Where(ps ...predicate.HiddenTagFilter) *HiddenTagFilterUpdateOne {
	htfuo.mutation.Where(ps...)
	return htfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htfuo *HiddenTagFilterUpdateOne) Select(field string, fields ...string) *HiddenTagFilterUpdateOne {
	htfuo.fields = append([]string{field}, fields...)
	return htfuo
}

// Save executes the query and returns the updated HiddenTagFilter entity.
func (htfuo *HiddenTagFilterUpdateOne) Save(ctx context.Context) (*HiddenTagFilter, error) {
	htfuo.defaults()
	return withHooks(ctx, htfuo.sqlSave, htfuo.mutation, htfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htfuo *HiddenTagFilterUpdateOne) SaveX(ctx context.Context) *HiddenTagFilter {
	node, err := htfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htfuo *HiddenTagFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := htfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htfuo *HiddenTagFilterUpdateOne) ExecX(ctx context.Context) {
	if err := htfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htfuo *HiddenTagFilterUpdateOne) defaults() {
	if _, ok := htfuo.mutation.UpdatedAt(); !ok {
		v := hiddentagfilter.UpdateDefaultUpdatedAt()
		htfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htfuo *HiddenTagFilterUpdateOne) check() error {
	if v, ok := htfuo.mutation.Value(); ok {
		if err := hiddentagfilter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "HiddenTagFilter.value": %w`, err)}
		}
	}
	return nil
}

func (htfuo *HiddenTagFilterUpdateOne) sqlSave(ctx context.Context) (_node *HiddenTagFilter, err error) {
	if err := htfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hiddentagfilter.Table, hiddentagfilter.Columns, sqlgraph.NewFieldSpec(hiddentagfilter.FieldID, field.TypeInt))
	id, ok := htfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HiddenTagFilter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiddentagfilter.FieldID)
		for _, f := range fields {
			if !hiddentagfilter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hiddentagfilter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htfuo.mutation.Value(); ok {
		_spec.SetField(hiddentagfilter.FieldValue, field.TypeString, value)
	}
	if value, ok := htfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hiddentagfilter.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &HiddenTagFilter{config: htfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiddentagfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htfuo.mutation.done = true
	return _node, nil
}
