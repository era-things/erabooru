// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/media"
	"era/booru/ent/mediavector"
	"era/booru/ent/vector"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	pgvector "github.com/pgvector/pgvector-go"
)

// MediaVectorCreate is the builder for creating a MediaVector entity.
type MediaVectorCreate struct {
	config
	mutation *MediaVectorMutation
	hooks    []Hook
}

// SetMediaID sets the "media_id" field.
func (mvc *MediaVectorCreate) SetMediaID(s string) *MediaVectorCreate {
	mvc.mutation.SetMediaID(s)
	return mvc
}

// SetVectorID sets the "vector_id" field.
func (mvc *MediaVectorCreate) SetVectorID(i int) *MediaVectorCreate {
	mvc.mutation.SetVectorID(i)
	return mvc
}

// SetValue sets the "value" field.
func (mvc *MediaVectorCreate) SetValue(pg pgvector.Vector) *MediaVectorCreate {
	mvc.mutation.SetValue(pg)
	return mvc
}

// SetMedia sets the "media" edge to the Media entity.
func (mvc *MediaVectorCreate) SetMedia(m *Media) *MediaVectorCreate {
	return mvc.SetMediaID(m.ID)
}

// SetVector sets the "vector" edge to the Vector entity.
func (mvc *MediaVectorCreate) SetVector(v *Vector) *MediaVectorCreate {
	return mvc.SetVectorID(v.ID)
}

// Mutation returns the MediaVectorMutation object of the builder.
func (mvc *MediaVectorCreate) Mutation() *MediaVectorMutation {
	return mvc.mutation
}

// Save creates the MediaVector in the database.
func (mvc *MediaVectorCreate) Save(ctx context.Context) (*MediaVector, error) {
	return withHooks(ctx, mvc.sqlSave, mvc.mutation, mvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *MediaVectorCreate) SaveX(ctx context.Context) *MediaVector {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *MediaVectorCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *MediaVectorCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *MediaVectorCreate) check() error {
	if _, ok := mvc.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media_id", err: errors.New(`ent: missing required field "MediaVector.media_id"`)}
	}
	if _, ok := mvc.mutation.VectorID(); !ok {
		return &ValidationError{Name: "vector_id", err: errors.New(`ent: missing required field "MediaVector.vector_id"`)}
	}
	if _, ok := mvc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "MediaVector.value"`)}
	}
	if len(mvc.mutation.MediaIDs()) == 0 {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required edge "MediaVector.media"`)}
	}
	if len(mvc.mutation.VectorIDs()) == 0 {
		return &ValidationError{Name: "vector", err: errors.New(`ent: missing required edge "MediaVector.vector"`)}
	}
	return nil
}

func (mvc *MediaVectorCreate) sqlSave(ctx context.Context) (*MediaVector, error) {
	if err := mvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mvc.mutation.id = &_node.ID
	mvc.mutation.done = true
	return _node, nil
}

func (mvc *MediaVectorCreate) createSpec() (*MediaVector, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaVector{config: mvc.config}
		_spec = sqlgraph.NewCreateSpec(mediavector.Table, sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt))
	)
	if value, ok := mvc.mutation.Value(); ok {
		_spec.SetField(mediavector.FieldValue, field.TypeOther, value)
		_node.Value = value
	}
	if nodes := mvc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.MediaTable,
			Columns: []string{mediavector.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MediaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mvc.mutation.VectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.VectorTable,
			Columns: []string{mediavector.VectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VectorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaVectorCreateBulk is the builder for creating many MediaVector entities in bulk.
type MediaVectorCreateBulk struct {
	config
	err      error
	builders []*MediaVectorCreate
}

// Save creates the MediaVector entities in the database.
func (mvcb *MediaVectorCreateBulk) Save(ctx context.Context) ([]*MediaVector, error) {
	if mvcb.err != nil {
		return nil, mvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*MediaVector, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaVectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *MediaVectorCreateBulk) SaveX(ctx context.Context) []*MediaVector {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *MediaVectorCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *MediaVectorCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
