// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/media"
	"era/booru/ent/mediavector"
	"era/booru/ent/vector"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	pgvector "github.com/pgvector/pgvector-go"
)

// MediaVector is the model entity for the MediaVector schema.
type MediaVector struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// VectorID holds the value of the "vector_id" field.
	VectorID int `json:"vector_id,omitempty"`
	// Vector value for the media/vector relation
	Value pgvector.Vector `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaVectorQuery when eager-loading is set.
	Edges        MediaVectorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaVectorEdges holds the relations/edges for other nodes in the graph.
type MediaVectorEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// Vector holds the value of the vector edge.
	Vector *Vector `json:"vector,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaVectorEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// VectorOrErr returns the Vector value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaVectorEdges) VectorOrErr() (*Vector, error) {
	if e.Vector != nil {
		return e.Vector, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vector.Label}
	}
	return nil, &NotLoadedError{edge: "vector"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaVector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediavector.FieldValue:
			values[i] = new(pgvector.Vector)
		case mediavector.FieldID, mediavector.FieldVectorID:
			values[i] = new(sql.NullInt64)
		case mediavector.FieldMediaID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaVector fields.
func (mv *MediaVector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediavector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mv.ID = int(value.Int64)
		case mediavector.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				mv.MediaID = value.String
			}
		case mediavector.FieldVectorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vector_id", values[i])
			} else if value.Valid {
				mv.VectorID = int(value.Int64)
			}
		case mediavector.FieldValue:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil {
				mv.Value = *value
			}
		default:
			mv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the MediaVector.
// This includes values selected through modifiers, order, etc.
func (mv *MediaVector) GetValue(name string) (ent.Value, error) {
	return mv.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the MediaVector entity.
func (mv *MediaVector) QueryMedia() *MediaQuery {
	return NewMediaVectorClient(mv.config).QueryMedia(mv)
}

// QueryVector queries the "vector" edge of the MediaVector entity.
func (mv *MediaVector) QueryVector() *VectorQuery {
	return NewMediaVectorClient(mv.config).QueryVector(mv)
}

// Update returns a builder for updating this MediaVector.
// Note that you need to call MediaVector.Unwrap() before calling this method if this MediaVector
// was returned from a transaction, and the transaction was committed or rolled back.
func (mv *MediaVector) Update() *MediaVectorUpdateOne {
	return NewMediaVectorClient(mv.config).UpdateOne(mv)
}

// Unwrap unwraps the MediaVector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mv *MediaVector) Unwrap() *MediaVector {
	_tx, ok := mv.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaVector is not a transactional entity")
	}
	mv.config.driver = _tx.drv
	return mv
}

// String implements the fmt.Stringer.
func (mv *MediaVector) String() string {
	var builder strings.Builder
	builder.WriteString("MediaVector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mv.ID))
	builder.WriteString("media_id=")
	builder.WriteString(mv.MediaID)
	builder.WriteString(", ")
	builder.WriteString("vector_id=")
	builder.WriteString(fmt.Sprintf("%v", mv.VectorID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", mv.Value))
	builder.WriteByte(')')
	return builder.String()
}

// MediaVectors is a parsable slice of MediaVector.
type MediaVectors []*MediaVector
