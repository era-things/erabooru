// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/media"
	"era/booru/ent/mediavector"
	"era/booru/ent/predicate"
	"era/booru/ent/vector"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	pgvector "github.com/pgvector/pgvector-go"
)

// MediaVectorUpdate is the builder for updating MediaVector entities.
type MediaVectorUpdate struct {
	config
	hooks    []Hook
	mutation *MediaVectorMutation
}

// Where appends a list predicates to the MediaVectorUpdate builder.
func (mvu *MediaVectorUpdate) Where(ps ...predicate.MediaVector) *MediaVectorUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetMediaID sets the "media_id" field.
func (mvu *MediaVectorUpdate) SetMediaID(s string) *MediaVectorUpdate {
	mvu.mutation.SetMediaID(s)
	return mvu
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (mvu *MediaVectorUpdate) SetNillableMediaID(s *string) *MediaVectorUpdate {
	if s != nil {
		mvu.SetMediaID(*s)
	}
	return mvu
}

// SetVectorID sets the "vector_id" field.
func (mvu *MediaVectorUpdate) SetVectorID(i int) *MediaVectorUpdate {
	mvu.mutation.SetVectorID(i)
	return mvu
}

// SetNillableVectorID sets the "vector_id" field if the given value is not nil.
func (mvu *MediaVectorUpdate) SetNillableVectorID(i *int) *MediaVectorUpdate {
	if i != nil {
		mvu.SetVectorID(*i)
	}
	return mvu
}

// SetValue sets the "value" field.
func (mvu *MediaVectorUpdate) SetValue(pg pgvector.Vector) *MediaVectorUpdate {
	mvu.mutation.SetValue(pg)
	return mvu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mvu *MediaVectorUpdate) SetNillableValue(pg *pgvector.Vector) *MediaVectorUpdate {
	if pg != nil {
		mvu.SetValue(*pg)
	}
	return mvu
}

// SetMedia sets the "media" edge to the Media entity.
func (mvu *MediaVectorUpdate) SetMedia(m *Media) *MediaVectorUpdate {
	return mvu.SetMediaID(m.ID)
}

// SetVector sets the "vector" edge to the Vector entity.
func (mvu *MediaVectorUpdate) SetVector(v *Vector) *MediaVectorUpdate {
	return mvu.SetVectorID(v.ID)
}

// Mutation returns the MediaVectorMutation object of the builder.
func (mvu *MediaVectorUpdate) Mutation() *MediaVectorMutation {
	return mvu.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (mvu *MediaVectorUpdate) ClearMedia() *MediaVectorUpdate {
	mvu.mutation.ClearMedia()
	return mvu
}

// ClearVector clears the "vector" edge to the Vector entity.
func (mvu *MediaVectorUpdate) ClearVector() *MediaVectorUpdate {
	mvu.mutation.ClearVector()
	return mvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *MediaVectorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mvu.sqlSave, mvu.mutation, mvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *MediaVectorUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *MediaVectorUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *MediaVectorUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvu *MediaVectorUpdate) check() error {
	if mvu.mutation.MediaCleared() && len(mvu.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaVector.media"`)
	}
	if mvu.mutation.VectorCleared() && len(mvu.mutation.VectorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaVector.vector"`)
	}
	return nil
}

func (mvu *MediaVectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mediavector.Table, mediavector.Columns, sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt))
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvu.mutation.Value(); ok {
		_spec.SetField(mediavector.FieldValue, field.TypeOther, value)
	}
	if mvu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.MediaTable,
			Columns: []string{mediavector.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.MediaTable,
			Columns: []string{mediavector.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.VectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.VectorTable,
			Columns: []string{mediavector.VectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.VectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.VectorTable,
			Columns: []string{mediavector.VectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediavector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mvu.mutation.done = true
	return n, nil
}

// MediaVectorUpdateOne is the builder for updating a single MediaVector entity.
type MediaVectorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaVectorMutation
}

// SetMediaID sets the "media_id" field.
func (mvuo *MediaVectorUpdateOne) SetMediaID(s string) *MediaVectorUpdateOne {
	mvuo.mutation.SetMediaID(s)
	return mvuo
}

// SetNillableMediaID sets the "media_id" field if the given value is not nil.
func (mvuo *MediaVectorUpdateOne) SetNillableMediaID(s *string) *MediaVectorUpdateOne {
	if s != nil {
		mvuo.SetMediaID(*s)
	}
	return mvuo
}

// SetVectorID sets the "vector_id" field.
func (mvuo *MediaVectorUpdateOne) SetVectorID(i int) *MediaVectorUpdateOne {
	mvuo.mutation.SetVectorID(i)
	return mvuo
}

// SetNillableVectorID sets the "vector_id" field if the given value is not nil.
func (mvuo *MediaVectorUpdateOne) SetNillableVectorID(i *int) *MediaVectorUpdateOne {
	if i != nil {
		mvuo.SetVectorID(*i)
	}
	return mvuo
}

// SetValue sets the "value" field.
func (mvuo *MediaVectorUpdateOne) SetValue(pg pgvector.Vector) *MediaVectorUpdateOne {
	mvuo.mutation.SetValue(pg)
	return mvuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (mvuo *MediaVectorUpdateOne) SetNillableValue(pg *pgvector.Vector) *MediaVectorUpdateOne {
	if pg != nil {
		mvuo.SetValue(*pg)
	}
	return mvuo
}

// SetMedia sets the "media" edge to the Media entity.
func (mvuo *MediaVectorUpdateOne) SetMedia(m *Media) *MediaVectorUpdateOne {
	return mvuo.SetMediaID(m.ID)
}

// SetVector sets the "vector" edge to the Vector entity.
func (mvuo *MediaVectorUpdateOne) SetVector(v *Vector) *MediaVectorUpdateOne {
	return mvuo.SetVectorID(v.ID)
}

// Mutation returns the MediaVectorMutation object of the builder.
func (mvuo *MediaVectorUpdateOne) Mutation() *MediaVectorMutation {
	return mvuo.mutation
}

// ClearMedia clears the "media" edge to the Media entity.
func (mvuo *MediaVectorUpdateOne) ClearMedia() *MediaVectorUpdateOne {
	mvuo.mutation.ClearMedia()
	return mvuo
}

// ClearVector clears the "vector" edge to the Vector entity.
func (mvuo *MediaVectorUpdateOne) ClearVector() *MediaVectorUpdateOne {
	mvuo.mutation.ClearVector()
	return mvuo
}

// Where appends a list predicates to the MediaVectorUpdate builder.
func (mvuo *MediaVectorUpdateOne) Where(ps ...predicate.MediaVector) *MediaVectorUpdateOne {
	mvuo.mutation.Where(ps...)
	return mvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *MediaVectorUpdateOne) Select(field string, fields ...string) *MediaVectorUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated MediaVector entity.
func (mvuo *MediaVectorUpdateOne) Save(ctx context.Context) (*MediaVector, error) {
	return withHooks(ctx, mvuo.sqlSave, mvuo.mutation, mvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *MediaVectorUpdateOne) SaveX(ctx context.Context) *MediaVector {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *MediaVectorUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *MediaVectorUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvuo *MediaVectorUpdateOne) check() error {
	if mvuo.mutation.MediaCleared() && len(mvuo.mutation.MediaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaVector.media"`)
	}
	if mvuo.mutation.VectorCleared() && len(mvuo.mutation.VectorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MediaVector.vector"`)
	}
	return nil
}

func (mvuo *MediaVectorUpdateOne) sqlSave(ctx context.Context) (_node *MediaVector, err error) {
	if err := mvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mediavector.Table, mediavector.Columns, sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt))
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MediaVector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mediavector.FieldID)
		for _, f := range fields {
			if !mediavector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mediavector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvuo.mutation.Value(); ok {
		_spec.SetField(mediavector.FieldValue, field.TypeOther, value)
	}
	if mvuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.MediaTable,
			Columns: []string{mediavector.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.MediaTable,
			Columns: []string{mediavector.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.VectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.VectorTable,
			Columns: []string{mediavector.VectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.VectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mediavector.VectorTable,
			Columns: []string{mediavector.VectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MediaVector{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediavector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mvuo.mutation.done = true
	return _node, nil
}
