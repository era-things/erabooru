// Code generated by ent, DO NOT EDIT.

package mediavector

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mediavector type in the database.
	Label = "media_vector"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMediaID holds the string denoting the media_id field in the database.
	FieldMediaID = "media_id"
	// FieldVectorID holds the string denoting the vector_id field in the database.
	FieldVectorID = "vector_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeVector holds the string denoting the vector edge name in mutations.
	EdgeVector = "vector"
	// Table holds the table name of the mediavector in the database.
	Table = "media_vectors"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "media_vectors"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "media_id"
	// VectorTable is the table that holds the vector relation/edge.
	VectorTable = "media_vectors"
	// VectorInverseTable is the table name for the Vector entity.
	// It exists in this package in order to avoid circular dependency with the "vector" package.
	VectorInverseTable = "vectors"
	// VectorColumn is the table column denoting the vector relation/edge.
	VectorColumn = "vector_id"
)

// Columns holds all SQL columns for mediavector fields.
var Columns = []string{
	FieldID,
	FieldMediaID,
	FieldVectorID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MediaVector queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMediaID orders the results by the media_id field.
func ByMediaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaID, opts...).ToFunc()
}

// ByVectorID orders the results by the vector_id field.
func ByVectorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVectorID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByMediaField orders the results by media field.
func ByMediaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), sql.OrderByField(field, opts...))
	}
}

// ByVectorField orders the results by vector field.
func ByVectorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVectorStep(), sql.OrderByField(field, opts...))
	}
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MediaTable, MediaColumn),
	)
}
func newVectorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VectorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VectorTable, VectorColumn),
	)
}
