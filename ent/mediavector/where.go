// Code generated by ent, DO NOT EDIT.

package mediavector

import (
	"era/booru/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLTE(FieldID, id))
}

// MediaID applies equality check predicate on the "media_id" field. It's identical to MediaIDEQ.
func MediaID(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldMediaID, v))
}

// VectorID applies equality check predicate on the "vector_id" field. It's identical to VectorIDEQ.
func VectorID(v int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldVectorID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldValue, v))
}

// MediaIDEQ applies the EQ predicate on the "media_id" field.
func MediaIDEQ(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldMediaID, v))
}

// MediaIDNEQ applies the NEQ predicate on the "media_id" field.
func MediaIDNEQ(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNEQ(FieldMediaID, v))
}

// MediaIDIn applies the In predicate on the "media_id" field.
func MediaIDIn(vs ...string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldIn(FieldMediaID, vs...))
}

// MediaIDNotIn applies the NotIn predicate on the "media_id" field.
func MediaIDNotIn(vs ...string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNotIn(FieldMediaID, vs...))
}

// MediaIDGT applies the GT predicate on the "media_id" field.
func MediaIDGT(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGT(FieldMediaID, v))
}

// MediaIDGTE applies the GTE predicate on the "media_id" field.
func MediaIDGTE(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGTE(FieldMediaID, v))
}

// MediaIDLT applies the LT predicate on the "media_id" field.
func MediaIDLT(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLT(FieldMediaID, v))
}

// MediaIDLTE applies the LTE predicate on the "media_id" field.
func MediaIDLTE(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLTE(FieldMediaID, v))
}

// MediaIDContains applies the Contains predicate on the "media_id" field.
func MediaIDContains(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldContains(FieldMediaID, v))
}

// MediaIDHasPrefix applies the HasPrefix predicate on the "media_id" field.
func MediaIDHasPrefix(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldHasPrefix(FieldMediaID, v))
}

// MediaIDHasSuffix applies the HasSuffix predicate on the "media_id" field.
func MediaIDHasSuffix(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldHasSuffix(FieldMediaID, v))
}

// MediaIDEqualFold applies the EqualFold predicate on the "media_id" field.
func MediaIDEqualFold(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEqualFold(FieldMediaID, v))
}

// MediaIDContainsFold applies the ContainsFold predicate on the "media_id" field.
func MediaIDContainsFold(v string) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldContainsFold(FieldMediaID, v))
}

// VectorIDEQ applies the EQ predicate on the "vector_id" field.
func VectorIDEQ(v int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldVectorID, v))
}

// VectorIDNEQ applies the NEQ predicate on the "vector_id" field.
func VectorIDNEQ(v int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNEQ(FieldVectorID, v))
}

// VectorIDIn applies the In predicate on the "vector_id" field.
func VectorIDIn(vs ...int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldIn(FieldVectorID, vs...))
}

// VectorIDNotIn applies the NotIn predicate on the "vector_id" field.
func VectorIDNotIn(vs ...int) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNotIn(FieldVectorID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v pgvector.Vector) predicate.MediaVector {
	return predicate.MediaVector(sql.FieldLTE(FieldValue, v))
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.MediaVector {
	return predicate.MediaVector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.MediaVector {
	return predicate.MediaVector(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVector applies the HasEdge predicate on the "vector" edge.
func HasVector() predicate.MediaVector {
	return predicate.MediaVector(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VectorTable, VectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVectorWith applies the HasEdge predicate on the "vector" edge with a given conditions (other predicates).
func HasVectorWith(preds ...predicate.Vector) predicate.MediaVector {
	return predicate.MediaVector(func(s *sql.Selector) {
		step := newVectorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MediaVector) predicate.MediaVector {
	return predicate.MediaVector(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MediaVector) predicate.MediaVector {
	return predicate.MediaVector(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MediaVector) predicate.MediaVector {
	return predicate.MediaVector(sql.NotPredicates(p))
}
