// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/hiddentagfilter"
	"era/booru/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HiddenTagFilterDelete is the builder for deleting a HiddenTagFilter entity.
type HiddenTagFilterDelete struct {
	config
	hooks    []Hook
	mutation *HiddenTagFilterMutation
}

// Where appends a list predicates to the HiddenTagFilterDelete builder.
func (htfd *HiddenTagFilterDelete) Where(ps ...predicate.HiddenTagFilter) *HiddenTagFilterDelete {
	htfd.mutation.Where(ps...)
	return htfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (htfd *HiddenTagFilterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, htfd.sqlExec, htfd.mutation, htfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (htfd *HiddenTagFilterDelete) ExecX(ctx context.Context) int {
	n, err := htfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (htfd *HiddenTagFilterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hiddentagfilter.Table, sqlgraph.NewFieldSpec(hiddentagfilter.FieldID, field.TypeInt))
	if ps := htfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, htfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	htfd.mutation.done = true
	return affected, err
}

// HiddenTagFilterDeleteOne is the builder for deleting a single HiddenTagFilter entity.
type HiddenTagFilterDeleteOne struct {
	htfd *HiddenTagFilterDelete
}

// Where appends a list predicates to the HiddenTagFilterDelete builder.
func (htfdo *HiddenTagFilterDeleteOne) Where(ps ...predicate.HiddenTagFilter) *HiddenTagFilterDeleteOne {
	htfdo.htfd.mutation.Where(ps...)
	return htfdo
}

// Exec executes the deletion query.
func (htfdo *HiddenTagFilterDeleteOne) Exec(ctx context.Context) error {
	n, err := htfdo.htfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hiddentagfilter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (htfdo *HiddenTagFilterDeleteOne) ExecX(ctx context.Context) {
	if err := htfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
