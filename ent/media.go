// Code generated by ent, DO NOT EDIT.

package ent

import (
	"era/booru/ent/media"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	// xxhash128 hash of the file, used as a unique identifier
	ID string `json:"id,omitempty"`
	// File format such as png or jpg
	Format string `json:"format,omitempty"`
	// Image width in pixels
	Width int16 `json:"width,omitempty"`
	// Image height in pixels
	Height int16 `json:"height,omitempty"`
	// Duration in seconds for video or audio
	Duration *int16 `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges        MediaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// Tags associated with the media item, used for categorization
	Tags []*Tag `json:"tags,omitempty"`
	// Date entries associated with the media item
	Dates []*Date `json:"dates,omitempty"`
	// Vector entries associated with the media item
	Vectors []*Vector `json:"vectors,omitempty"`
	// MediaDates holds the value of the media_dates edge.
	MediaDates []*MediaDate `json:"media_dates,omitempty"`
	// MediaVectors holds the value of the media_vectors edge.
	MediaVectors []*MediaVector `json:"media_vectors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// DatesOrErr returns the Dates value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) DatesOrErr() ([]*Date, error) {
	if e.loadedTypes[1] {
		return e.Dates, nil
	}
	return nil, &NotLoadedError{edge: "dates"}
}

// VectorsOrErr returns the Vectors value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) VectorsOrErr() ([]*Vector, error) {
	if e.loadedTypes[2] {
		return e.Vectors, nil
	}
	return nil, &NotLoadedError{edge: "vectors"}
}

// MediaDatesOrErr returns the MediaDates value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) MediaDatesOrErr() ([]*MediaDate, error) {
	if e.loadedTypes[3] {
		return e.MediaDates, nil
	}
	return nil, &NotLoadedError{edge: "media_dates"}
}

// MediaVectorsOrErr returns the MediaVectors value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) MediaVectorsOrErr() ([]*MediaVector, error) {
	if e.loadedTypes[4] {
		return e.MediaVectors, nil
	}
	return nil, &NotLoadedError{edge: "media_vectors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldWidth, media.FieldHeight, media.FieldDuration:
			values[i] = new(sql.NullInt64)
		case media.FieldID, media.FieldFormat:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case media.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				m.Format = value.String
			}
		case media.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				m.Width = int16(value.Int64)
			}
		case media.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				m.Height = int16(value.Int64)
			}
		case media.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				m.Duration = new(int16)
				*m.Duration = int16(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Media entity.
func (m *Media) QueryTags() *TagQuery {
	return NewMediaClient(m.config).QueryTags(m)
}

// QueryDates queries the "dates" edge of the Media entity.
func (m *Media) QueryDates() *DateQuery {
	return NewMediaClient(m.config).QueryDates(m)
}

// QueryVectors queries the "vectors" edge of the Media entity.
func (m *Media) QueryVectors() *VectorQuery {
	return NewMediaClient(m.config).QueryVectors(m)
}

// QueryMediaDates queries the "media_dates" edge of the Media entity.
func (m *Media) QueryMediaDates() *MediaDateQuery {
	return NewMediaClient(m.config).QueryMediaDates(m)
}

// QueryMediaVectors queries the "media_vectors" edge of the Media entity.
func (m *Media) QueryMediaVectors() *MediaVectorQuery {
	return NewMediaClient(m.config).QueryMediaVectors(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("format=")
	builder.WriteString(m.Format)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", m.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", m.Height))
	builder.WriteString(", ")
	if v := m.Duration; v != nil {
		builder.WriteString("duration=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
