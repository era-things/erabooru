// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/media"
	"era/booru/ent/mediavector"
	"era/booru/ent/predicate"
	"era/booru/ent/vector"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VectorUpdate is the builder for updating Vector entities.
type VectorUpdate struct {
	config
	hooks    []Hook
	mutation *VectorMutation
}

// Where appends a list predicates to the VectorUpdate builder.
func (vu *VectorUpdate) Where(ps ...predicate.Vector) *VectorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (vu *VectorUpdate) AddMediumIDs(ids ...string) *VectorUpdate {
	vu.mutation.AddMediumIDs(ids...)
	return vu
}

// AddMedia adds the "media" edges to the Media entity.
func (vu *VectorUpdate) AddMedia(m ...*Media) *VectorUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMediumIDs(ids...)
}

// AddMediaVectorIDs adds the "media_vectors" edge to the MediaVector entity by IDs.
func (vu *VectorUpdate) AddMediaVectorIDs(ids ...int) *VectorUpdate {
	vu.mutation.AddMediaVectorIDs(ids...)
	return vu
}

// AddMediaVectors adds the "media_vectors" edges to the MediaVector entity.
func (vu *VectorUpdate) AddMediaVectors(m ...*MediaVector) *VectorUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMediaVectorIDs(ids...)
}

// Mutation returns the VectorMutation object of the builder.
func (vu *VectorUpdate) Mutation() *VectorMutation {
	return vu.mutation
}

// ClearMedia clears all "media" edges to the Media entity.
func (vu *VectorUpdate) ClearMedia() *VectorUpdate {
	vu.mutation.ClearMedia()
	return vu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (vu *VectorUpdate) RemoveMediumIDs(ids ...string) *VectorUpdate {
	vu.mutation.RemoveMediumIDs(ids...)
	return vu
}

// RemoveMedia removes "media" edges to Media entities.
func (vu *VectorUpdate) RemoveMedia(m ...*Media) *VectorUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMediumIDs(ids...)
}

// ClearMediaVectors clears all "media_vectors" edges to the MediaVector entity.
func (vu *VectorUpdate) ClearMediaVectors() *VectorUpdate {
	vu.mutation.ClearMediaVectors()
	return vu
}

// RemoveMediaVectorIDs removes the "media_vectors" edge to MediaVector entities by IDs.
func (vu *VectorUpdate) RemoveMediaVectorIDs(ids ...int) *VectorUpdate {
	vu.mutation.RemoveMediaVectorIDs(ids...)
	return vu
}

// RemoveMediaVectors removes "media_vectors" edges to MediaVector entities.
func (vu *VectorUpdate) RemoveMediaVectors(m ...*MediaVector) *VectorUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMediaVectorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VectorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VectorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VectorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VectorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vector.Table, vector.Columns, sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !vu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MediaVectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMediaVectorsIDs(); len(nodes) > 0 && !vu.mutation.MediaVectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MediaVectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VectorUpdateOne is the builder for updating a single Vector entity.
type VectorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VectorMutation
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (vuo *VectorUpdateOne) AddMediumIDs(ids ...string) *VectorUpdateOne {
	vuo.mutation.AddMediumIDs(ids...)
	return vuo
}

// AddMedia adds the "media" edges to the Media entity.
func (vuo *VectorUpdateOne) AddMedia(m ...*Media) *VectorUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMediumIDs(ids...)
}

// AddMediaVectorIDs adds the "media_vectors" edge to the MediaVector entity by IDs.
func (vuo *VectorUpdateOne) AddMediaVectorIDs(ids ...int) *VectorUpdateOne {
	vuo.mutation.AddMediaVectorIDs(ids...)
	return vuo
}

// AddMediaVectors adds the "media_vectors" edges to the MediaVector entity.
func (vuo *VectorUpdateOne) AddMediaVectors(m ...*MediaVector) *VectorUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMediaVectorIDs(ids...)
}

// Mutation returns the VectorMutation object of the builder.
func (vuo *VectorUpdateOne) Mutation() *VectorMutation {
	return vuo.mutation
}

// ClearMedia clears all "media" edges to the Media entity.
func (vuo *VectorUpdateOne) ClearMedia() *VectorUpdateOne {
	vuo.mutation.ClearMedia()
	return vuo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (vuo *VectorUpdateOne) RemoveMediumIDs(ids ...string) *VectorUpdateOne {
	vuo.mutation.RemoveMediumIDs(ids...)
	return vuo
}

// RemoveMedia removes "media" edges to Media entities.
func (vuo *VectorUpdateOne) RemoveMedia(m ...*Media) *VectorUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMediumIDs(ids...)
}

// ClearMediaVectors clears all "media_vectors" edges to the MediaVector entity.
func (vuo *VectorUpdateOne) ClearMediaVectors() *VectorUpdateOne {
	vuo.mutation.ClearMediaVectors()
	return vuo
}

// RemoveMediaVectorIDs removes the "media_vectors" edge to MediaVector entities by IDs.
func (vuo *VectorUpdateOne) RemoveMediaVectorIDs(ids ...int) *VectorUpdateOne {
	vuo.mutation.RemoveMediaVectorIDs(ids...)
	return vuo
}

// RemoveMediaVectors removes "media_vectors" edges to MediaVector entities.
func (vuo *VectorUpdateOne) RemoveMediaVectors(m ...*MediaVector) *VectorUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMediaVectorIDs(ids...)
}

// Where appends a list predicates to the VectorUpdate builder.
func (vuo *VectorUpdateOne) Where(ps ...predicate.Vector) *VectorUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VectorUpdateOne) Select(field string, fields ...string) *VectorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vector entity.
func (vuo *VectorUpdateOne) Save(ctx context.Context) (*Vector, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VectorUpdateOne) SaveX(ctx context.Context) *Vector {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VectorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VectorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VectorUpdateOne) sqlSave(ctx context.Context) (_node *Vector, err error) {
	_spec := sqlgraph.NewUpdateSpec(vector.Table, vector.Columns, sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vector.FieldID)
		for _, f := range fields {
			if !vector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !vuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MediaVectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMediaVectorsIDs(); len(nodes) > 0 && !vuo.mutation.MediaVectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MediaVectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vector{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
