// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/hiddentagfilter"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HiddenTagFilterCreate is the builder for creating a HiddenTagFilter entity.
type HiddenTagFilterCreate struct {
	config
	mutation *HiddenTagFilterMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (htfc *HiddenTagFilterCreate) SetValue(s string) *HiddenTagFilterCreate {
	htfc.mutation.SetValue(s)
	return htfc
}

// SetCreatedAt sets the "created_at" field.
func (htfc *HiddenTagFilterCreate) SetCreatedAt(t time.Time) *HiddenTagFilterCreate {
	htfc.mutation.SetCreatedAt(t)
	return htfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (htfc *HiddenTagFilterCreate) SetNillableCreatedAt(t *time.Time) *HiddenTagFilterCreate {
	if t != nil {
		htfc.SetCreatedAt(*t)
	}
	return htfc
}

// SetUpdatedAt sets the "updated_at" field.
func (htfc *HiddenTagFilterCreate) SetUpdatedAt(t time.Time) *HiddenTagFilterCreate {
	htfc.mutation.SetUpdatedAt(t)
	return htfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htfc *HiddenTagFilterCreate) SetNillableUpdatedAt(t *time.Time) *HiddenTagFilterCreate {
	if t != nil {
		htfc.SetUpdatedAt(*t)
	}
	return htfc
}

// Mutation returns the HiddenTagFilterMutation object of the builder.
func (htfc *HiddenTagFilterCreate) Mutation() *HiddenTagFilterMutation {
	return htfc.mutation
}

// Save creates the HiddenTagFilter in the database.
func (htfc *HiddenTagFilterCreate) Save(ctx context.Context) (*HiddenTagFilter, error) {
	htfc.defaults()
	return withHooks(ctx, htfc.sqlSave, htfc.mutation, htfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htfc *HiddenTagFilterCreate) SaveX(ctx context.Context) *HiddenTagFilter {
	v, err := htfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htfc *HiddenTagFilterCreate) Exec(ctx context.Context) error {
	_, err := htfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htfc *HiddenTagFilterCreate) ExecX(ctx context.Context) {
	if err := htfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htfc *HiddenTagFilterCreate) defaults() {
	if _, ok := htfc.mutation.CreatedAt(); !ok {
		v := hiddentagfilter.DefaultCreatedAt()
		htfc.mutation.SetCreatedAt(v)
	}
	if _, ok := htfc.mutation.UpdatedAt(); !ok {
		v := hiddentagfilter.DefaultUpdatedAt()
		htfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htfc *HiddenTagFilterCreate) check() error {
	if _, ok := htfc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "HiddenTagFilter.value"`)}
	}
	if v, ok := htfc.mutation.Value(); ok {
		if err := hiddentagfilter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "HiddenTagFilter.value": %w`, err)}
		}
	}
	if _, ok := htfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HiddenTagFilter.created_at"`)}
	}
	if _, ok := htfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HiddenTagFilter.updated_at"`)}
	}
	return nil
}

func (htfc *HiddenTagFilterCreate) sqlSave(ctx context.Context) (*HiddenTagFilter, error) {
	if err := htfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	htfc.mutation.id = &_node.ID
	htfc.mutation.done = true
	return _node, nil
}

func (htfc *HiddenTagFilterCreate) createSpec() (*HiddenTagFilter, *sqlgraph.CreateSpec) {
	var (
		_node = &HiddenTagFilter{config: htfc.config}
		_spec = sqlgraph.NewCreateSpec(hiddentagfilter.Table, sqlgraph.NewFieldSpec(hiddentagfilter.FieldID, field.TypeInt))
	)
	if value, ok := htfc.mutation.Value(); ok {
		_spec.SetField(hiddentagfilter.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := htfc.mutation.CreatedAt(); ok {
		_spec.SetField(hiddentagfilter.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := htfc.mutation.UpdatedAt(); ok {
		_spec.SetField(hiddentagfilter.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// HiddenTagFilterCreateBulk is the builder for creating many HiddenTagFilter entities in bulk.
type HiddenTagFilterCreateBulk struct {
	config
	err      error
	builders []*HiddenTagFilterCreate
}

// Save creates the HiddenTagFilter entities in the database.
func (htfcb *HiddenTagFilterCreateBulk) Save(ctx context.Context) ([]*HiddenTagFilter, error) {
	if htfcb.err != nil {
		return nil, htfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htfcb.builders))
	nodes := make([]*HiddenTagFilter, len(htfcb.builders))
	mutators := make([]Mutator, len(htfcb.builders))
	for i := range htfcb.builders {
		func(i int, root context.Context) {
			builder := htfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HiddenTagFilterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htfcb *HiddenTagFilterCreateBulk) SaveX(ctx context.Context) []*HiddenTagFilter {
	v, err := htfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htfcb *HiddenTagFilterCreateBulk) Exec(ctx context.Context) error {
	_, err := htfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htfcb *HiddenTagFilterCreateBulk) ExecX(ctx context.Context) {
	if err := htfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
