// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"era/booru/ent/media"
	"era/booru/ent/mediavector"
	"era/booru/ent/vector"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VectorCreate is the builder for creating a Vector entity.
type VectorCreate struct {
	config
	mutation *VectorMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (vc *VectorCreate) SetName(s string) *VectorCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VectorCreate) SetID(i int) *VectorCreate {
	vc.mutation.SetID(i)
	return vc
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (vc *VectorCreate) AddMediumIDs(ids ...string) *VectorCreate {
	vc.mutation.AddMediumIDs(ids...)
	return vc
}

// AddMedia adds the "media" edges to the Media entity.
func (vc *VectorCreate) AddMedia(m ...*Media) *VectorCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddMediumIDs(ids...)
}

// AddMediaVectorIDs adds the "media_vectors" edge to the MediaVector entity by IDs.
func (vc *VectorCreate) AddMediaVectorIDs(ids ...int) *VectorCreate {
	vc.mutation.AddMediaVectorIDs(ids...)
	return vc
}

// AddMediaVectors adds the "media_vectors" edges to the MediaVector entity.
func (vc *VectorCreate) AddMediaVectors(m ...*MediaVector) *VectorCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddMediaVectorIDs(ids...)
}

// Mutation returns the VectorMutation object of the builder.
func (vc *VectorCreate) Mutation() *VectorMutation {
	return vc.mutation
}

// Save creates the Vector in the database.
func (vc *VectorCreate) Save(ctx context.Context) (*Vector, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VectorCreate) SaveX(ctx context.Context) *Vector {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VectorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VectorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VectorCreate) check() error {
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Vector.name"`)}
	}
	return nil
}

func (vc *VectorCreate) sqlSave(ctx context.Context) (*Vector, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VectorCreate) createSpec() (*Vector, *sqlgraph.CreateSpec) {
	var (
		_node = &Vector{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vector.Table, sqlgraph.NewFieldSpec(vector.FieldID, field.TypeInt))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(vector.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := vc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vector.MediaTable,
			Columns: vector.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.MediaVectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vector.MediaVectorsTable,
			Columns: []string{vector.MediaVectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediavector.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VectorCreateBulk is the builder for creating many Vector entities in bulk.
type VectorCreateBulk struct {
	config
	err      error
	builders []*VectorCreate
}

// Save creates the Vector entities in the database.
func (vcb *VectorCreateBulk) Save(ctx context.Context) ([]*Vector, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vector, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VectorCreateBulk) SaveX(ctx context.Context) []*Vector {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VectorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VectorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
