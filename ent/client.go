// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"era/booru/ent/migrate"

	"era/booru/ent/date"
	"era/booru/ent/media"
	"era/booru/ent/mediadate"
	"era/booru/ent/mediavector"
	"era/booru/ent/tag"
	"era/booru/ent/vector"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Date is the client for interacting with the Date builders.
	Date *DateClient
	// Media is the client for interacting with the Media builders.
	Media *MediaClient
	// MediaDate is the client for interacting with the MediaDate builders.
	MediaDate *MediaDateClient
	// MediaVector is the client for interacting with the MediaVector builders.
	MediaVector *MediaVectorClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Vector is the client for interacting with the Vector builders.
	Vector *VectorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Date = NewDateClient(c.config)
	c.Media = NewMediaClient(c.config)
	c.MediaDate = NewMediaDateClient(c.config)
	c.MediaVector = NewMediaVectorClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Vector = NewVectorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Date:        NewDateClient(cfg),
		Media:       NewMediaClient(cfg),
		MediaDate:   NewMediaDateClient(cfg),
		MediaVector: NewMediaVectorClient(cfg),
		Tag:         NewTagClient(cfg),
		Vector:      NewVectorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Date:        NewDateClient(cfg),
		Media:       NewMediaClient(cfg),
		MediaDate:   NewMediaDateClient(cfg),
		MediaVector: NewMediaVectorClient(cfg),
		Tag:         NewTagClient(cfg),
		Vector:      NewVectorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Date.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Date, c.Media, c.MediaDate, c.MediaVector, c.Tag, c.Vector,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Date, c.Media, c.MediaDate, c.MediaVector, c.Tag, c.Vector,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DateMutation:
		return c.Date.mutate(ctx, m)
	case *MediaMutation:
		return c.Media.mutate(ctx, m)
	case *MediaDateMutation:
		return c.MediaDate.mutate(ctx, m)
	case *MediaVectorMutation:
		return c.MediaVector.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *VectorMutation:
		return c.Vector.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DateClient is a client for the Date schema.
type DateClient struct {
	config
}

// NewDateClient returns a client for the Date from the given config.
func NewDateClient(c config) *DateClient {
	return &DateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `date.Hooks(f(g(h())))`.
func (c *DateClient) Use(hooks ...Hook) {
	c.hooks.Date = append(c.hooks.Date, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `date.Intercept(f(g(h())))`.
func (c *DateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Date = append(c.inters.Date, interceptors...)
}

// Create returns a builder for creating a Date entity.
func (c *DateClient) Create() *DateCreate {
	mutation := newDateMutation(c.config, OpCreate)
	return &DateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Date entities.
func (c *DateClient) CreateBulk(builders ...*DateCreate) *DateCreateBulk {
	return &DateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DateClient) MapCreateBulk(slice any, setFunc func(*DateCreate, int)) *DateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DateCreateBulk{err: fmt.Errorf("calling to DateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Date.
func (c *DateClient) Update() *DateUpdate {
	mutation := newDateMutation(c.config, OpUpdate)
	return &DateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DateClient) UpdateOne(d *Date) *DateUpdateOne {
	mutation := newDateMutation(c.config, OpUpdateOne, withDate(d))
	return &DateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DateClient) UpdateOneID(id int) *DateUpdateOne {
	mutation := newDateMutation(c.config, OpUpdateOne, withDateID(id))
	return &DateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Date.
func (c *DateClient) Delete() *DateDelete {
	mutation := newDateMutation(c.config, OpDelete)
	return &DateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DateClient) DeleteOne(d *Date) *DateDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DateClient) DeleteOneID(id int) *DateDeleteOne {
	builder := c.Delete().Where(date.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DateDeleteOne{builder}
}

// Query returns a query builder for Date.
func (c *DateClient) Query() *DateQuery {
	return &DateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDate},
		inters: c.Interceptors(),
	}
}

// Get returns a Date entity by its id.
func (c *DateClient) Get(ctx context.Context, id int) (*Date, error) {
	return c.Query().Where(date.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DateClient) GetX(ctx context.Context, id int) *Date {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a Date.
func (c *DateClient) QueryMedia(d *Date) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(date.Table, date.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, date.MediaTable, date.MediaPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMediaDates queries the media_dates edge of a Date.
func (c *DateClient) QueryMediaDates(d *Date) *MediaDateQuery {
	query := (&MediaDateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(date.Table, date.FieldID, id),
			sqlgraph.To(mediadate.Table, mediadate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, date.MediaDatesTable, date.MediaDatesColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DateClient) Hooks() []Hook {
	return c.hooks.Date
}

// Interceptors returns the client interceptors.
func (c *DateClient) Interceptors() []Interceptor {
	return c.inters.Date
}

func (c *DateClient) mutate(ctx context.Context, m *DateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Date mutation op: %q", m.Op())
	}
}

// MediaClient is a client for the Media schema.
type MediaClient struct {
	config
}

// NewMediaClient returns a client for the Media from the given config.
func NewMediaClient(c config) *MediaClient {
	return &MediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `media.Hooks(f(g(h())))`.
func (c *MediaClient) Use(hooks ...Hook) {
	c.hooks.Media = append(c.hooks.Media, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `media.Intercept(f(g(h())))`.
func (c *MediaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Media = append(c.inters.Media, interceptors...)
}

// Create returns a builder for creating a Media entity.
func (c *MediaClient) Create() *MediaCreate {
	mutation := newMediaMutation(c.config, OpCreate)
	return &MediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Media entities.
func (c *MediaClient) CreateBulk(builders ...*MediaCreate) *MediaCreateBulk {
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaClient) MapCreateBulk(slice any, setFunc func(*MediaCreate, int)) *MediaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaCreateBulk{err: fmt.Errorf("calling to MediaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Media.
func (c *MediaClient) Update() *MediaUpdate {
	mutation := newMediaMutation(c.config, OpUpdate)
	return &MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaClient) UpdateOne(m *Media) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMedia(m))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaClient) UpdateOneID(id string) *MediaUpdateOne {
	mutation := newMediaMutation(c.config, OpUpdateOne, withMediaID(id))
	return &MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Media.
func (c *MediaClient) Delete() *MediaDelete {
	mutation := newMediaMutation(c.config, OpDelete)
	return &MediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaClient) DeleteOne(m *Media) *MediaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaClient) DeleteOneID(id string) *MediaDeleteOne {
	builder := c.Delete().Where(media.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaDeleteOne{builder}
}

// Query returns a query builder for Media.
func (c *MediaClient) Query() *MediaQuery {
	return &MediaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedia},
		inters: c.Interceptors(),
	}
}

// Get returns a Media entity by its id.
func (c *MediaClient) Get(ctx context.Context, id string) (*Media, error) {
	return c.Query().Where(media.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaClient) GetX(ctx context.Context, id string) *Media {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Media.
func (c *MediaClient) QueryTags(m *Media) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, media.TagsTable, media.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDates queries the dates edge of a Media.
func (c *MediaClient) QueryDates(m *Media) *DateQuery {
	query := (&DateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(date.Table, date.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, media.DatesTable, media.DatesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVectors queries the vectors edge of a Media.
func (c *MediaClient) QueryVectors(m *Media) *VectorQuery {
	query := (&VectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(vector.Table, vector.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, media.VectorsTable, media.VectorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMediaDates queries the media_dates edge of a Media.
func (c *MediaClient) QueryMediaDates(m *Media) *MediaDateQuery {
	query := (&MediaDateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(mediadate.Table, mediadate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, media.MediaDatesTable, media.MediaDatesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMediaVectors queries the media_vectors edge of a Media.
func (c *MediaClient) QueryMediaVectors(m *Media) *MediaVectorQuery {
	query := (&MediaVectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(media.Table, media.FieldID, id),
			sqlgraph.To(mediavector.Table, mediavector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, media.MediaVectorsTable, media.MediaVectorsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MediaClient) Hooks() []Hook {
	return c.hooks.Media
}

// Interceptors returns the client interceptors.
func (c *MediaClient) Interceptors() []Interceptor {
	return c.inters.Media
}

func (c *MediaClient) mutate(ctx context.Context, m *MediaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Media mutation op: %q", m.Op())
	}
}

// MediaDateClient is a client for the MediaDate schema.
type MediaDateClient struct {
	config
}

// NewMediaDateClient returns a client for the MediaDate from the given config.
func NewMediaDateClient(c config) *MediaDateClient {
	return &MediaDateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mediadate.Hooks(f(g(h())))`.
func (c *MediaDateClient) Use(hooks ...Hook) {
	c.hooks.MediaDate = append(c.hooks.MediaDate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mediadate.Intercept(f(g(h())))`.
func (c *MediaDateClient) Intercept(interceptors ...Interceptor) {
	c.inters.MediaDate = append(c.inters.MediaDate, interceptors...)
}

// Create returns a builder for creating a MediaDate entity.
func (c *MediaDateClient) Create() *MediaDateCreate {
	mutation := newMediaDateMutation(c.config, OpCreate)
	return &MediaDateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MediaDate entities.
func (c *MediaDateClient) CreateBulk(builders ...*MediaDateCreate) *MediaDateCreateBulk {
	return &MediaDateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaDateClient) MapCreateBulk(slice any, setFunc func(*MediaDateCreate, int)) *MediaDateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaDateCreateBulk{err: fmt.Errorf("calling to MediaDateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaDateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaDateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MediaDate.
func (c *MediaDateClient) Update() *MediaDateUpdate {
	mutation := newMediaDateMutation(c.config, OpUpdate)
	return &MediaDateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaDateClient) UpdateOne(md *MediaDate) *MediaDateUpdateOne {
	mutation := newMediaDateMutation(c.config, OpUpdateOne, withMediaDate(md))
	return &MediaDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaDateClient) UpdateOneID(id int) *MediaDateUpdateOne {
	mutation := newMediaDateMutation(c.config, OpUpdateOne, withMediaDateID(id))
	return &MediaDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MediaDate.
func (c *MediaDateClient) Delete() *MediaDateDelete {
	mutation := newMediaDateMutation(c.config, OpDelete)
	return &MediaDateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaDateClient) DeleteOne(md *MediaDate) *MediaDateDeleteOne {
	return c.DeleteOneID(md.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaDateClient) DeleteOneID(id int) *MediaDateDeleteOne {
	builder := c.Delete().Where(mediadate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaDateDeleteOne{builder}
}

// Query returns a query builder for MediaDate.
func (c *MediaDateClient) Query() *MediaDateQuery {
	return &MediaDateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMediaDate},
		inters: c.Interceptors(),
	}
}

// Get returns a MediaDate entity by its id.
func (c *MediaDateClient) Get(ctx context.Context, id int) (*MediaDate, error) {
	return c.Query().Where(mediadate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaDateClient) GetX(ctx context.Context, id int) *MediaDate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a MediaDate.
func (c *MediaDateClient) QueryMedia(md *MediaDate) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mediadate.Table, mediadate.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mediadate.MediaTable, mediadate.MediaColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDate queries the date edge of a MediaDate.
func (c *MediaDateClient) QueryDate(md *MediaDate) *DateQuery {
	query := (&DateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := md.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mediadate.Table, mediadate.FieldID, id),
			sqlgraph.To(date.Table, date.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mediadate.DateTable, mediadate.DateColumn),
		)
		fromV = sqlgraph.Neighbors(md.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MediaDateClient) Hooks() []Hook {
	return c.hooks.MediaDate
}

// Interceptors returns the client interceptors.
func (c *MediaDateClient) Interceptors() []Interceptor {
	return c.inters.MediaDate
}

func (c *MediaDateClient) mutate(ctx context.Context, m *MediaDateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaDateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaDateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaDateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaDateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MediaDate mutation op: %q", m.Op())
	}
}

// MediaVectorClient is a client for the MediaVector schema.
type MediaVectorClient struct {
	config
}

// NewMediaVectorClient returns a client for the MediaVector from the given config.
func NewMediaVectorClient(c config) *MediaVectorClient {
	return &MediaVectorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mediavector.Hooks(f(g(h())))`.
func (c *MediaVectorClient) Use(hooks ...Hook) {
	c.hooks.MediaVector = append(c.hooks.MediaVector, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mediavector.Intercept(f(g(h())))`.
func (c *MediaVectorClient) Intercept(interceptors ...Interceptor) {
	c.inters.MediaVector = append(c.inters.MediaVector, interceptors...)
}

// Create returns a builder for creating a MediaVector entity.
func (c *MediaVectorClient) Create() *MediaVectorCreate {
	mutation := newMediaVectorMutation(c.config, OpCreate)
	return &MediaVectorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MediaVector entities.
func (c *MediaVectorClient) CreateBulk(builders ...*MediaVectorCreate) *MediaVectorCreateBulk {
	return &MediaVectorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MediaVectorClient) MapCreateBulk(slice any, setFunc func(*MediaVectorCreate, int)) *MediaVectorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MediaVectorCreateBulk{err: fmt.Errorf("calling to MediaVectorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MediaVectorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MediaVectorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MediaVector.
func (c *MediaVectorClient) Update() *MediaVectorUpdate {
	mutation := newMediaVectorMutation(c.config, OpUpdate)
	return &MediaVectorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaVectorClient) UpdateOne(mv *MediaVector) *MediaVectorUpdateOne {
	mutation := newMediaVectorMutation(c.config, OpUpdateOne, withMediaVector(mv))
	return &MediaVectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaVectorClient) UpdateOneID(id int) *MediaVectorUpdateOne {
	mutation := newMediaVectorMutation(c.config, OpUpdateOne, withMediaVectorID(id))
	return &MediaVectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MediaVector.
func (c *MediaVectorClient) Delete() *MediaVectorDelete {
	mutation := newMediaVectorMutation(c.config, OpDelete)
	return &MediaVectorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediaVectorClient) DeleteOne(mv *MediaVector) *MediaVectorDeleteOne {
	return c.DeleteOneID(mv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediaVectorClient) DeleteOneID(id int) *MediaVectorDeleteOne {
	builder := c.Delete().Where(mediavector.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaVectorDeleteOne{builder}
}

// Query returns a query builder for MediaVector.
func (c *MediaVectorClient) Query() *MediaVectorQuery {
	return &MediaVectorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMediaVector},
		inters: c.Interceptors(),
	}
}

// Get returns a MediaVector entity by its id.
func (c *MediaVectorClient) Get(ctx context.Context, id int) (*MediaVector, error) {
	return c.Query().Where(mediavector.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaVectorClient) GetX(ctx context.Context, id int) *MediaVector {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a MediaVector.
func (c *MediaVectorClient) QueryMedia(mv *MediaVector) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mediavector.Table, mediavector.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mediavector.MediaTable, mediavector.MediaColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVector queries the vector edge of a MediaVector.
func (c *MediaVectorClient) QueryVector(mv *MediaVector) *VectorQuery {
	query := (&VectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mediavector.Table, mediavector.FieldID, id),
			sqlgraph.To(vector.Table, vector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mediavector.VectorTable, mediavector.VectorColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MediaVectorClient) Hooks() []Hook {
	return c.hooks.MediaVector
}

// Interceptors returns the client interceptors.
func (c *MediaVectorClient) Interceptors() []Interceptor {
	return c.inters.MediaVector
}

func (c *MediaVectorClient) mutate(ctx context.Context, m *MediaVectorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediaVectorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediaVectorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediaVectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediaVectorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MediaVector mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a Tag.
func (c *TagClient) QueryMedia(t *Tag) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.MediaTable, tag.MediaPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// VectorClient is a client for the Vector schema.
type VectorClient struct {
	config
}

// NewVectorClient returns a client for the Vector from the given config.
func NewVectorClient(c config) *VectorClient {
	return &VectorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vector.Hooks(f(g(h())))`.
func (c *VectorClient) Use(hooks ...Hook) {
	c.hooks.Vector = append(c.hooks.Vector, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vector.Intercept(f(g(h())))`.
func (c *VectorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vector = append(c.inters.Vector, interceptors...)
}

// Create returns a builder for creating a Vector entity.
func (c *VectorClient) Create() *VectorCreate {
	mutation := newVectorMutation(c.config, OpCreate)
	return &VectorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vector entities.
func (c *VectorClient) CreateBulk(builders ...*VectorCreate) *VectorCreateBulk {
	return &VectorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VectorClient) MapCreateBulk(slice any, setFunc func(*VectorCreate, int)) *VectorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VectorCreateBulk{err: fmt.Errorf("calling to VectorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VectorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VectorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vector.
func (c *VectorClient) Update() *VectorUpdate {
	mutation := newVectorMutation(c.config, OpUpdate)
	return &VectorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VectorClient) UpdateOne(v *Vector) *VectorUpdateOne {
	mutation := newVectorMutation(c.config, OpUpdateOne, withVector(v))
	return &VectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VectorClient) UpdateOneID(id int) *VectorUpdateOne {
	mutation := newVectorMutation(c.config, OpUpdateOne, withVectorID(id))
	return &VectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vector.
func (c *VectorClient) Delete() *VectorDelete {
	mutation := newVectorMutation(c.config, OpDelete)
	return &VectorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VectorClient) DeleteOne(v *Vector) *VectorDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VectorClient) DeleteOneID(id int) *VectorDeleteOne {
	builder := c.Delete().Where(vector.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VectorDeleteOne{builder}
}

// Query returns a query builder for Vector.
func (c *VectorClient) Query() *VectorQuery {
	return &VectorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVector},
		inters: c.Interceptors(),
	}
}

// Get returns a Vector entity by its id.
func (c *VectorClient) Get(ctx context.Context, id int) (*Vector, error) {
	return c.Query().Where(vector.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VectorClient) GetX(ctx context.Context, id int) *Vector {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedia queries the media edge of a Vector.
func (c *VectorClient) QueryMedia(v *Vector) *MediaQuery {
	query := (&MediaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vector.Table, vector.FieldID, id),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, vector.MediaTable, vector.MediaPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMediaVectors queries the media_vectors edge of a Vector.
func (c *VectorClient) QueryMediaVectors(v *Vector) *MediaVectorQuery {
	query := (&MediaVectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vector.Table, vector.FieldID, id),
			sqlgraph.To(mediavector.Table, mediavector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vector.MediaVectorsTable, vector.MediaVectorsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VectorClient) Hooks() []Hook {
	return c.hooks.Vector
}

// Interceptors returns the client interceptors.
func (c *VectorClient) Interceptors() []Interceptor {
	return c.inters.Vector
}

func (c *VectorClient) mutate(ctx context.Context, m *VectorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VectorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VectorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VectorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vector mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Date, Media, MediaDate, MediaVector, Tag, Vector []ent.Hook
	}
	inters struct {
		Date, Media, MediaDate, MediaVector, Tag, Vector []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
